jQuery(function($) {
  var Slide, SlideShow, a1, addClass, byId, canTransition, ctr, disableBuilds, disableNotes, doc, li_array, linkEls, loaded, query, queryAll, removeClass, slideshow, spaces, strToArray, stylesheetPath, testStyle, toArray, toggleClass, total, transitionSlides, trim;
  loaded = [];
  doc = document;
  disableBuilds = false;
  disableNotes = false;
  ctr = 0;
  spaces = /\s+/;
  a1 = [""];
  toArray = function(list) {
    return Array.prototype.slice.call(list || [], 0);
  };
  byId = function(id) {
    if (typeof id === "string") {
      return doc.getElementById(id);
    }
    return id;
  };
  query = function(query, root) {
    return queryAll(query, root)[0];
  };
  queryAll = function(query, root) {
    var rootIsDoc;
    if (!query) {
      return [];
    }
    if (typeof query !== "string") {
      return toArray(query);
    }
    if (typeof root === "string") {
      root = byId(root);
      if (!root) {
        return [];
      }
    }
    root = root || document;
    rootIsDoc = root.nodeType === 9;
    doc = (rootIsDoc ? root : root.ownerDocument || document);
    if (!rootIsDoc || (">~+".indexOf(query.charAt(0)) >= 0)) {
      root.id = root.id || ("qUnique" + (ctr++));
      query = "#" + root.id + " " + query;
    }
    if (">~+".indexOf(query.slice(-1)) >= 0) {
      query += " *";
    }
    return toArray(doc.querySelectorAll(query));
  };
  strToArray = function(s) {
    if (typeof s === "string" || s instanceof String) {
      if (s.indexOf(" ") < 0) {
        a1[0] = s;
        return a1;
      } else {
        return s.split(spaces);
      }
    }
    return s;
  };
  trim = function(str) {
    return str.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
  };
  addClass = function(node, classStr) {
    var c, cls, i, len;
    classStr = strToArray(classStr);
    cls = " " + node.className + " ";
    i = 0;
    len = classStr.length;
    c = void 0;
    while (i < len) {
      c = classStr[i];
      if (c && cls.indexOf(" " + c + " ") < 0) {
        cls += c + " ";
      }
      ++i;
    }
    node.className = trim(cls);
  };
  removeClass = function(node, classStr) {
    var cls, i, len;
    cls = void 0;
    if (classStr !== undefined) {
      classStr = strToArray(classStr);
      cls = " " + node.className + " ";
      i = 0;
      len = classStr.length;
      while (i < len) {
        cls = cls.replace(" " + classStr[i] + " ", " ");
        ++i;
      }
      cls = trim(cls);
    } else {
      cls = "";
    }
    if (node.className !== cls) {
      node.className = cls;
    }
  };
  toggleClass = function(node, classStr) {
    var cls;
    cls = " " + node.className + " ";
    if (cls.indexOf(" " + trim(classStr) + " ") >= 0) {
      removeClass(node, classStr);
    } else {
      addClass(node, classStr);
    }
  };
  testStyle = function(style) {
    var bool, bump, elem, len, prefixes, prop;
    elem = document.createElement("div");
    prefixes = ["Webkit", "Moz", "O", "ms", "Khtml"];
    bool = void 0;
    bump = function(all, letter) {
      return letter.toUpperCase();
    };
    prop = void 0;
    bool = style in elem.style;
    prop = style.replace(/^(.)/, bump).replace(/-([a-z])/g, bump);
    len = prefixes.length;
    while (len--) {
      if (bool) {
        break;
      }
      bool = prefixes[len] + prop in elem.style;
    }
    document.documentElement.className += " " + (bool ? "" : "no-") + style.replace(/-/g, "");
    return bool;
  };
  canTransition = testStyle("transition");
  Slide = function(node, idx) {
    var note;
    this._node = node;
    note = query(".note > section", node);
    this._speakerNote = (note ? note.innerHTML : "");
    if (idx >= 0) {
      this._count = idx + 1;
    }
    if (this._node) {
      addClass(this._node, "slide distant-slide");
    }
    this._makeCounter();
    this._makeBuildList();
  };
  Slide.prototype = {
    _node: null,
    _count: 0,
    _buildList: [],
    _visited: false,
    _currentState: "",
    _states: ["distant-slide", "far-past", "past", "current", "future", "far-future", "distant-slide"],
    setState: function(state) {
      var _t;
      if (typeof state !== "string") {
        state = this._states[state];
      }
      if (state === "current" && !this._visited) {
        this._visited = true;
        this._makeBuildList();
      }
      removeClass(this._node, this._states);
      addClass(this._node, state);
      this._currentState = state;
      _t = this;
      setTimeout((function() {
        _t._runAutos();
      }), 400);
      if (state === "current") {
        this._onLoad();
      } else {
        this._onUnload();
      }
    },
    _onLoad: function() {
      this._fireEvent("onload");
      this._showFrames();
    },
    _onUnload: function() {
      this._fireEvent("onunload");
      this._hideFrames();
    },
    _fireEvent: function(name) {
      var eventSrc, fn;
      eventSrc = this._node.getAttribute(name);
      if (eventSrc) {
        eventSrc = "(function() { " + eventSrc + " })";
        fn = eval_(eventSrc);
        fn.call(this._node);
      }
    },
    _showFrames: function() {
      var frames, show;
      show = function() {
        frames.forEach(function(el) {
          var _src;
          _src = el.getAttribute("_src");
          if (_src && _src.length) {
            el.src = _src;
          }
        });
      };
      frames = queryAll("iframe", this._node);
      setTimeout(show, 0);
    },
    _hideFrames: function() {
      var frames, hide;
      hide = function() {
        frames.forEach(function(el) {
          var _src;
          _src = el.getAttribute("_src");
          if (_src && _src.length) {
            el.src = "";
          }
        });
      };
      frames = queryAll("iframe", this._node);
      setTimeout(hide, 250);
    },
    _makeCounter: function() {
      var c;
      if (!this._count || !this._node) {
        return;
      }
      c = doc.createElement("span");
      c.className = "counter";
      this._node.appendChild(c);
    },
    _makeBuildList: function() {
      this._buildList = [];
      if (disableBuilds) {
        return;
      }
      if (this._node) {
        this._buildList = queryAll("[data-build] > *", this._node);
      }
      this._buildList.forEach(function(el) {
        addClass(el, "to-build");
      });
    },
    _runAutos: function() {
      var elem, idx, l, _t;
      if (this._currentState !== "current") {
        return;
      }
      idx = -1;
      this._buildList.some(function(n, i) {
        if (n.hasAttribute("data-auto")) {
          idx = i;
          return true;
        }
        return false;
      });
      if (idx >= 0) {
        elem = this._buildList.splice(idx, 1)[0];
        _t = this;
        if (canTransition) {
          l = function(evt) {
            elem.parentNode.removeEventListener("webkitTransitionEnd", l, false);
            elem.parentNode.removeEventListener("transitionend", l, false);
            elem.parentNode.removeEventListener("oTransitionEnd", l, false);
            _t._runAutos();
          };
          elem.parentNode.addEventListener("webkitTransitionEnd", l, false);
          elem.parentNode.addEventListener("transitionend", l, false);
          elem.parentNode.addEventListener("oTransitionEnd", l, false);
          removeClass(elem, "to-build");
        } else {
          setTimeout((function() {
            removeClass(elem, "to-build");
            _t._runAutos();
          }), 400);
        }
      }
    },
    getSpeakerNote: function() {
      return this._speakerNote;
    },
    buildNext: function() {
      if (!this._buildList.length) {
        return false;
      }
      removeClass(this._buildList.shift(), "to-build");
      return true;
    }
  };
  SlideShow = function(slides) {
    var h, _t;
    this._slides = (slides || []).map(function(el, idx) {
      return new Slide(el, idx);
    });
    h = window.location.hash;
    try {
      this.current = h;
    } catch (_error) {}
    this.current = (!this.current ? "landing-slide" : this.current.replace("#", ""));
    if (!query("#" + this.current)) {
      alert("The format of the permalinks have recently changed. If you are coming " + "here from an old external link it's very likely you will land to the wrong slide");
      this.current = "landing-slide";
    }
    _t = this;
    doc.addEventListener("keydown", (function(e) {
      _t.handleKeys(e);
    }), false);
    doc.addEventListener("touchstart", (function(e) {
      _t.handleTouchStart(e);
    }), false);
    doc.addEventListener("touchend", (function(e) {
      _t.handleTouchEnd(e);
    }), false);
    window.addEventListener("popstate", (function(e) {
      if (e.state) {
        _t.go(e.state, true);
      }
    }), false);
    this._update();
  };
  SlideShow.prototype = {
    _presentationCounter: query("#presentation-counter"),
    _menuCounter: query("#slide-no"),
    _speakerNote: query("#speaker-note"),
    _help: query("#help"),
    _slides: [],
    _getCurrentIndex: function() {
      var me, slideCount;
      me = this;
      slideCount = null;
      queryAll(".slide").forEach(function(slide, i) {
        if (slide.id === me.current) {
          slideCount = i;
        }
      });
      return slideCount + 1;
    },
    _update: function(targetId, dontPush) {
      var cb, currentIndex, docElem, elem, savedIndex, temp, updatePreview, x;
      currentIndex = this._getCurrentIndex();
      if (targetId) {
        savedIndex = currentIndex;
        this.current = targetId;
        currentIndex = this._getCurrentIndex();
        if (Math.abs(savedIndex - currentIndex) > 1) {
          x = savedIndex;
          while (x < savedIndex + 7) {
            if (this._slides[x - 4]) {
              this._slides[x - 4].setState(0);
            }
            x++;
          }
        }
      }
      docElem = document.documentElement;
      elem = document.elementFromPoint(docElem.clientWidth / 2, docElem.clientHeight / 2);
      if (elem && elem.className !== "presentation") {
        this._presentationCounter.textContent = currentIndex + " of " + total;
        if (this._menuCounter) {
          this._menuCounter.textContent = currentIndex + " of " + total;
        }
      }
      if (history.pushState) {
        if (!dontPush) {
          history.pushState(this.current, "Slide " + this.current, "#" + this.current);
        }
      } else {
        window.location.hash = this.current;
      }
      x = currentIndex;
      while (x < currentIndex + 7) {
        if (this._slides[x - 4]) {
          this._slides[x - 4].setState(x - currentIndex);
        }
        x++;
      }
      $("body").removeClass(function(index, css) {
        return (css.match(/\bslide-\S+/g) || []).join(" ");
      }).addClass("slide-" + this.current);
      this.transitioning = true;
      cb = (function(_this) {
        return function() {
          return _this.transitioning = false;
        };
      })(this);
      setTimeout(cb, 500);
      console.log('Sliding To:', this.current);
      updatePreview = function(el, html) {
        return $(el).parents('.example').find('.preview').html(html);
      };
      temp = this.current;
      $('#' + this.current).find('textarea').each(function() {
        var options;
        if (loaded[temp]) {
          return;
        }
        loaded[temp] = true;
        console.log('Loaded:', temp);
        options = {
          mode: $(this).data('lang'),
          theme: 'monokai'
        };
        if ($(this).data('lang') === 'javascript') {
          return CodeMirror.fromTextArea(this, options);
        } else {
          updatePreview(this, $(this).text());
          options.value = $(this).text();
          return CodeMirror.fromTextArea(this, options).on('change', function(i) {
            return updatePreview(i.getTextArea(), i.getValue());
          });
        }
      });
    },
    current: 0,
    next: function() {
      var next;
      if (!this._slides[this._getCurrentIndex() - 1].buildNext()) {
        next = query("#" + this.current + " + .slide");
        this._update((next ? next.id : this.current));
      }
    },
    prev: function() {
      var prev;
      prev = query(".slide:nth-child(" + (this._getCurrentIndex() - 1) + ")");
      this._update((prev ? prev.id : this.current));
    },
    go: function(slideId, dontPush) {
      this._update(slideId, dontPush);
    },
    showNotes: function() {
      if (disableNotes) {
        return;
      }
      this._speakerNote.style.display = "block";
      this._speakerNote.classList.toggle("invisible");
    },
    switch3D: function() {
      toggleClass(document.body, "three-d");
    },
    toggleHightlight: function() {
      var link;
      link = query("#prettify-link");
      link.disabled = !link.disabled;
      sessionStorage["highlightOn"] = !link.disabled;
    },
    changeTheme: function() {
      var linkEls, sheetIndex;
      linkEls = queryAll("link.theme");
      sheetIndex = 0;
      linkEls.forEach(function(stylesheet, i) {
        if (!stylesheet.disabled) {
          sheetIndex = i;
        }
      });
      linkEls[sheetIndex].disabled = true;
      linkEls[(sheetIndex + 1) % linkEls.length].disabled = false;
      sessionStorage["theme"] = linkEls[(sheetIndex + 1) % linkEls.length].href;
    },
    toggleHelp: function() {
      this._help.style.display = "block";
      this._help.classList.toggle("invisible");
    },
    viewSource: function() {
      window.open("view-source:" + window.location.href);
    },
    handleKeys: function(e) {
      if (/^(input|textarea)$/i.test(e.target.nodeName) || e.target.isContentEditable) {
        return;
      }
      switch (e.keyCode) {
        case 37:
          return this.prev();
        case 39:
        case 32:
          return this.next();
        case 33:
          return this.prev();
        case 34:
          return this.next();
        case 48:
          return this.toggleHelp();
        case 51:
          return this.switch3D();
        case 72:
          return this.toggleHightlight();
        case 78:
          return this.showNotes();
        case 83:
          return this.viewSource();
        case 84:
          return this.changeTheme();
      }
    },
    _touchStartX: 0,
    handleTouchStart: function(e) {
      this._touchStartX = e.touches[0].pageX;
    },
    handleTouchEnd: function(e) {
      var SWIPE_SIZE, delta;
      delta = this._touchStartX - e.changedTouches[0].pageX;
      SWIPE_SIZE = 150;
      if (delta > SWIPE_SIZE) {
        this.next();
      } else {
        if (delta < -SWIPE_SIZE) {
          this.prev();
        }
      }
    },
    onNavClick: function(e) {
      if (e.target.id === "nav-prev") {
        this.prev();
      } else {
        if (e.target.id = "nav-next") {
          this.next();
        }
      }
    },
    onCommandClick: function(e) {
      var n;
      n = e.target.getAttribute("data-command");
      switch (n) {
        case "toc":
          return this._update("table-of-contents");
        case "resources":
        case "notes":
          return this.showNotes();
        case "source":
          return this.viewSource();
        case "help":
          return this.toggleHelp();
      }
    }
  };
  linkEls = queryAll("link.theme");
  total = queryAll(".slide").length;
  stylesheetPath = sessionStorage["theme"] || "css/default.css";
  linkEls.forEach(function(stylesheet) {
    stylesheet.disabled = stylesheet.href.indexOf(stylesheetPath) === -1;
  });
  li_array = [];
  transitionSlides = queryAll(".transitionSlide").forEach(function(el) {
    li_array.push(["<li><a data-hash=\"", el.id, "\">", query("h2", el).textContent, "</a><img src=\"", query("img", el).src.replace(/64/g, "32"), "\"/></li>"].join(""));
  });
  slideshow = new SlideShow(queryAll(".slide"));
  queryAll("#toc-list li a").forEach(function(el) {
    el.onclick = function() {
      slideshow.go(el.dataset["hash"]);
    };
  });
  queryAll("pre").forEach(function(el) {
    addClass(el, "prettyprint");
  });
  $('.flip').on('click', function(e) {
    e.preventDefault();
    return $(this).parents('.slide').toggleClass('horizontal');
  });
  jwerty.key('alt+h', function() {
    return $('.current').toggleClass('horizontal');
  });
  jwerty.key('alt+1', function() {
    return $('.current').toggleClass('codeShown');
  });
  return jwerty.key('alt+2', function() {
    return $('.current').toggleClass('previewShown');
  });
});
