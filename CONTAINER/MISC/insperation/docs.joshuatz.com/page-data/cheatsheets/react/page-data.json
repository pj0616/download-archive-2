{
  "componentChunkName": "component---src-templates-generic-js",
  "path": "/cheatsheets/react/",
  "result": {
    "data": {
      "markdownRemark": {
        "html": "<h2 id=\"other-resources\" style=\"position:relative;\"><a href=\"#other-resources\" aria-label=\"other resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Other resources</h2>\n<p>My other pages:</p>\n<ul>\n<li><a href=\"./react-hooks.md\">React Hooks</a></li>\n<li><a href=\"./react-performance-optimization.md\">React Performance and Optimizations</a></li>\n</ul>\n<p>External resources:</p>\n<table>\n<thead>\n<tr>\n<th>What &#x26; Link</th>\n<th>Type</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"The React Handbook\" by Flavio Copes - <a href=\"https://www.freecodecamp.org/news/the-react-handbook-b71c27b0a795/\" target=\"_blank\" rel=\"nofollow noopener\">Online version</a> <a href=\"https://flaviocopes.com/page/react-handbook/\" target=\"_blank\" rel=\"nofollow noopener\">PDF signup</a><br>   ---> Amazing resource!</td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://sebastiandedeyne.com/react-for-vue-developers/\" target=\"_blank\" rel=\"nofollow noopener\">\"React for Vue Developers\"</a> by Sebastian De Deyne</td>\n<td>Guide / Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"nofollow noopener\">React Lifecycles Method Diagram</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\" target=\"_blank\" rel=\"nofollow noopener\">React+TypeScript Cheatsheets</a><br/>    - <a href=\"https://react-typescript-cheatsheet.netlify.app/\" target=\"_blank\" rel=\"nofollow noopener\">Live Website</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/piotrwitek/react-redux-typescript-guide\" target=\"_blank\" rel=\"nofollow noopener\">React Redux TypeScript Guide</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td>PluralSight: <a href=\"https://www.pluralsight.com/guides/composing-react-components-with-typescript\" target=\"_blank\" rel=\"nofollow noopener\">Composing React Components with TypeScript</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Post: <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"nofollow noopener\">\"You Probably Don't Need Derived State\"</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Collection: <a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener\">enaqx/awesome-react</a></td>\n<td>Collection</td>\n<td></td>\n</tr>\n<tr>\n<td>Kent C. Dodds - <a href=\"https://kentcdodds.com/blog/super-simple-start-to-react\" target=\"_blank\" rel=\"nofollow noopener\">\"Super Simple Start to React\"</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Steven Jin: <a href=\"https://medium.com/@stevenjinyi/study-sheet-for-react-interview-questions-2020-2fe25b8fa316\" target=\"_blank\" rel=\"nofollow noopener\">Cheat Sheet for React Interview, 2020</a></td>\n<td>Refresher / Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/learning-zone/react-interview-questions\" target=\"_blank\" rel=\"nofollow noopener\">learning-zone/react-interview-questions</a></td>\n<td>Refresher / Cheatsheet</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"binding-template-literal\" style=\"position:relative;\"><a href=\"#binding-template-literal\" aria-label=\"binding template literal permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Binding template literal</h2>\n<p>Binding template literal to property expecting string:\nYou have to use double brackets to \"break out\" of JSX and into regular JS.\nInstead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SEO</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`${props.pageContext.slug}`<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>You need:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SEO</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>pageContext<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3 id=\"creating-unique-keys\" style=\"position:relative;\"><a href=\"#creating-unique-keys\" aria-label=\"creating unique keys permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Creating unique keys</h3>\n<p>You want a unique identifier, which is actually harder than one might expect to create. Using the <code>index</code> provided within a loop is not recommended, and even combining with something like <code>(new Date()).getTime()</code> is not guaranteed to be unique.</p>\n<p>There are tons of packages out there that you can drop in to create unique Ids. Or just make a composite key out of enough unique parameters to ensure non-duplicates.</p>\n<h2 id=\"misc--how-do-i\" style=\"position:relative;\"><a href=\"#misc--how-do-i\" aria-label=\"misc  how do i permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Misc / How Do I...</h2>\n<ul>\n<li>\n<p>You can now use empty elements, known as <em>fragments</em>, to wrap siblings:</p>\n<ul>\n<li><code>&#x3C;>&#x3C;div>&#x3C;/div>&#x3C;div>&#x3C;/div>&#x3C;/></code></li>\n</ul>\n</li>\n<li>\n<p>Issues returning JSX?</p>\n<ul>\n<li>More than one line? Make sure wrapped in parenthesis <code>return (&#x3C;div>&#x3C;/div>)</code></li>\n<li>Make sure there is *only <strong>one*</strong> root level element</li>\n</ul>\n</li>\n<li>\n<p>Pass a bunch of options to a component as props (basically convert JS Obj to props)</p>\n<ul>\n<li>Just use spread operator - <code>{...props}</code></li>\n<li>You can use this re-use the same props across multiple components!</li>\n<li>\n<p>Be careful about directly spreading vs capturing via rest parameters and then spreading - you might not want to pass <em>all</em> props to child component</p>\n<ul>\n<li>This is why you often see <code>const {myVarA, myVarB, ...restProps} = props;</code> inside components -> <code>restProps</code> would be a subset of <code>props</code> that does not contain <code>myVarA</code> or <code>myVarB</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Simulate a change event on a <code>&#x3C;input></code> element</p>\n<ul>\n<li>Use a combination of an exposed setter with a manual event dispatch</li>\n<li>See <a href=\"https://stackoverflow.com/a/46012210/11447682\" target=\"_blank\" rel=\"nofollow noopener\">https://stackoverflow.com/a/46012210/11447682</a></li>\n</ul>\n</li>\n<li>\n<p>How to add an external stylesheet (not for bundling)</p>\n<ul>\n<li>Instead of using <code>import</code> within a JS file (like <em>App.js</em>), add the stylesheet directly as a link tag element in the <strong>HTML</strong> file (e.g. <code>&#x3C;link rel=\"stylesheet\" href=\"https://.../style.css\" /></code>)</li>\n</ul>\n</li>\n<li>\n<p>How do I access an element directly (similar to native browser APIs like <code>document.getElementById</code>) in React? How do I get the DOM node?</p>\n<ul>\n<li>That is a great use case for React <code>refs</code>! - <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener\">Docs</a></li>\n<li>\n<p>Options:</p>\n<ul>\n<li>\n<p>Newest and recommended: <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\" rel=\"nofollow noopener\"><code>useRef</code> hook</a></p>\n<ul>\n<li><code>myRef = useRef(null)</code></li>\n</ul>\n</li>\n<li>Older:- <code>this.myRef = React.createRef()</code> in class constructor</li>\n</ul>\n</li>\n<li>You can access DOM node through <code>myRef.current</code>, after attaching via <code>&#x3C;MyElement ref={myRef}/></code></li>\n</ul>\n</li>\n<li>\n<p>How do I expose and call a function from a child component in a parent component (aka passing methods up through the component tree)?</p>\n<ul>\n<li>This is considered a bit of an <em>anti-pattern</em> with React, and is generally avoided entirely (things are always passed down, not up).</li>\n<li>However, there are still ways to do so - the main way is to use refs (<a href=\"https://stackoverflow.com/a/37950970/11447682\" target=\"_blank\" rel=\"nofollow noopener\">S/O</a>, <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener\">Docs</a>)</li>\n</ul>\n</li>\n<li>\n<p>What's with the <code>{}</code> curly braces? Is this Mustache or Handlebars templating?</p>\n<ul>\n<li>No, the curly braces simply tell the JSX compiler that you are about to give it something that should be evaluated as a <strong><em>JavaScript Expression</em></strong>, rather than a string or component.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tips\" style=\"position:relative;\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Tips</h2>\n<ul>\n<li>You can assign JSX to variables! Makes it very easy to reuse!</li>\n<li>\n<p>Make use of object destructuring assignments to avoid repetitive props syntax</p>\n<ul>\n<li><code>const {hidden, dataArr, isAdmin, isAuthed} = this.props</code></li>\n<li>-> Or, destructure right in function argument, <code>const myComponent = ({hidden, dataArr, isAdmin, isAuthed}) => {}</code></li>\n</ul>\n</li>\n<li>You can use class members and/or regular vars to hold changing values, as opposed to putting in state/props, if you want to avoid unnecessary renders when those values are not part of UI</li>\n</ul>\n<h2 id=\"asset-management-and-usage\" style=\"position:relative;\"><a href=\"#asset-management-and-usage\" aria-label=\"asset management and usage permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Asset management and usage</h2>\n<p>You have two main options when it comes to asset management:</p>\n<ul>\n<li>\n<p><a href=\"https://create-react-app.dev/docs/using-the-public-folder\" target=\"_blank\" rel=\"nofollow noopener\">Public Folder</a>: Place in <code>/public</code></p>\n<ul>\n<li>Pull into HTML with <code>%PUBLIC_URL%</code></li>\n<li>Pull into JS with <code>process.env.PUBLIC_URL</code></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://create-react-app.dev/docs/adding-images-fonts-and-files\" target=\"_blank\" rel=\"nofollow noopener\">Bundling</a>: Place asset files <em>alongside</em> JS, in <code>/src</code></p>\n<ul>\n<li>Pull into JS by using <code>import</code> at top of file with relatively path</li>\n<li>Pull into css (e.g. for background image) with relative path</li>\n</ul>\n</li>\n</ul>\n<p>The second option <a href=\"https://create-react-app.dev/docs/adding-images-fonts-and-files\" target=\"_blank\" rel=\"nofollow noopener\">is <em>always</em> preferred</a>, since it uses webpack to bundle assets and will help keep the size of your app down by only bundling assets that are actually used (as well as some other tricks).</p>\n<h3 id=\"importing-assets-in-js-or-css\" style=\"position:relative;\"><a href=\"#importing-assets-in-js-or-css\" aria-label=\"importing assets in js or css permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Importing assets in JS or CSS</h3>\n<p>Examples:</p>\n<p>JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> background <span class=\"token keyword\">from</span> <span class=\"token string\">'./assets/background.jpg'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CSS:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./assets/background.jpg<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"getting-around-method-binding-of-this\" style=\"position:relative;\"><a href=\"#getting-around-method-binding-of-this\" aria-label=\"getting around method binding of this permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Getting around method binding of <code>this</code></h2>\n<p>A common issue with React is preserving the value of <code>this</code>, especially when it comes to event handlers, like <code>onClick</code>.</p>\n<p>If the callback you are assigning uses <code>this</code> within its body, you will have issues if the value of <code>this</code> changes (most often in a <code>Cannot read property '___' of undefined</code> error).</p>\n<p>Here are some ways to ensure the value of <code>this</code> stays the way you want it to:</p>\n<h3 id=\"explicit-with-bind-on-the-attribute\" style=\"position:relative;\"><a href=\"#explicit-with-bind-on-the-attribute\" aria-label=\"explicit with bind on the attribute permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Explicit, with <code>.bind()</code> on the attribute</h3>\n<p>The older method was commonly to use <code>.bind()</code> to explicitly bind the value of this at the point of attaching the handler. That might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"es6-class-binding\" style=\"position:relative;\"><a href=\"#es6-class-binding\" aria-label=\"es6 class binding permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>ES6 Class binding</h3>\n<p>If you are using the new ES6 class syntax, you have all the other options, plus a few more. Let's say this is our base code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> updatedCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tcounter<span class=\"token operator\">:</span> updatedCount\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Counter + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One option is to use <code>.bind()</code>, in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ADDED:</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another option is to turn the <code>handleClick</code> method, into a <em>member</em>, that is the value of an arrow function, thus automatically binding <code>this</code> to the class:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Rest of class definition</span>\n<span class=\"token comment\">// Or: public handleClick = (evt) => {}</span>\n<span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> updatedCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tcounter<span class=\"token operator\">:</span> updatedCount\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<blockquote>\n<p>Technically, this is actually an ES6 <em>public field</em>, which is, as of 2019, in an experimental stage, so while it is well supported with transpiled JS/TS, it has limited native browser support.</p>\n</blockquote>\n<h3 id=\"inline-arrow-functions\" style=\"position:relative;\"><a href=\"#inline-arrow-functions\" aria-label=\"inline arrow functions permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Inline arrow functions</h3>\n<p>One of the benefits (or drawbacks) of arrow functions is that they lexically bind <code>this</code> - <strong>automatically</strong>. So, if you do:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>It doesn't matter if <code>CustomComponent</code> has a different <code>this</code> scope, because the arrow function binds the callback where you defined it!</p>\n<h3 id=\"use-createreactclass\" style=\"position:relative;\"><a href=\"#use-createreactclass\" aria-label=\"use createreactclass permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Use <code>createReactClass</code></h3>\n<p>If you use <code>createReactClass</code>, you generally don't have to worry about this issue, as <a href=\"https://reactjs.org/docs/react-without-es6.html#autobinding\" target=\"_blank\" rel=\"nofollow noopener\">createReactClass uses autobinding</a>, which basically does <code>.bind()</code> for you.</p>\n<h3 id=\"more-reading\" style=\"position:relative;\"><a href=\"#more-reading\" aria-label=\"more reading permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>More reading</h3>\n<ul>\n<li><a href=\"http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html\" target=\"_blank\" rel=\"nofollow noopener\">http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html</a></li>\n<li><a href=\"https://www.sitepoint.com/bind-javascripts-this-keyword-react/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.sitepoint.com/bind-javascripts-this-keyword-react/</a></li>\n</ul>\n<hr>\n<h2 id=\"computed-properties\" style=\"position:relative;\"><a href=\"#computed-properties\" aria-label=\"computed properties permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Computed properties</h2>\n<p>Unlike Vue, which has a specific syntax for computed properties, React doesn't really care how you try to formulate values based on computed state properties.</p>\n<h3 id=\"es6-class---getter\" style=\"position:relative;\"><a href=\"#es6-class---getter\" aria-label=\"es6 class   getter permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>ES6 Class - Getter</h3>\n<p>With the new ES6 class based approach, a very clean solution is to use <em>getters</em>, with something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ... class stuff</span>\n\t<span class=\"token keyword\">get</span> <span class=\"token function\">isAdult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"within-the-render-function-itself\" style=\"position:relative;\"><a href=\"#within-the-render-function-itself\" aria-label=\"within the render function itself permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Within the render function itself</h3>\n<p>There is nothing preventing you from computing a value within the <code>render</code> function itself. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ... class stuff</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> isAdult <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t\t\t\tIs adult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>isAdult<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"as-a-function\" style=\"position:relative;\"><a href=\"#as-a-function\" aria-label=\"as a function permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>As a function</h3>\n<p>Another vanilla solution here is to simply use a function to return the computed value, rather than anything else. How you declare this is up to you:</p>\n<ul>\n<li>Explicitly, with <code>function myFunction(){}</code></li>\n<li>\n<p>As a ES6 class member</p>\n<ul>\n<li><code>public isAdult() {}</code></li>\n</ul>\n</li>\n<li>\n<p>With an arrow function to bind <code>this</code></p>\n<ul>\n<li><code>const isAdult = () => {};</code></li>\n</ul>\n</li>\n<li>Etc.</li>\n</ul>\n<p>To use within your <code>render</code> method, simply make sure you actually execute it by following it with the parenthesis and arguments if applicable.</p>\n<h3 id=\"state-management-system\" style=\"position:relative;\"><a href=\"#state-management-system\" aria-label=\"state management system permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>State management system</h3>\n<p>If you are using a dedicated state management system, there is a chance that what you are using might already have something in place to not only provide explicit computed properties, but also optimize them, to prevent redundant expensive re-calculations.</p>\n<p>For example, if you use MobX, make sure to check out <a href=\"https://mobx.js.org/refguide/computed-decorator.html\" target=\"_blank\" rel=\"nofollow noopener\">this page</a> on <em>computed values</em>.</p>\n<h3 id=\"further-reading\" style=\"position:relative;\"><a href=\"#further-reading\" aria-label=\"further reading permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Further reading:</h3>\n<ul>\n<li><a href=\"https://daveceddia.com/computed-properties-in-react/\" target=\"_blank\" rel=\"nofollow noopener\">https://daveceddia.com/computed-properties-in-react/</a></li>\n</ul>\n<hr>\n<h2 id=\"handlebars--mustache-type-logic-loops-conditional-etc\" style=\"position:relative;\"><a href=\"#handlebars--mustache-type-logic-loops-conditional-etc\" aria-label=\"handlebars  mustache type logic loops conditional etc permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Handlebars / Mustache type logic (loops, conditional, etc)</h2>\n<h3 id=\"conditional-rendering\" style=\"position:relative;\"><a href=\"#conditional-rendering\" aria-label=\"conditional rendering permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Conditional rendering</h3>\n<p>Tons of options - see <a href=\"https://scotch.io/tutorials/7-ways-to-implement-conditional-rendering-in-react-applications\" target=\"_blank\" rel=\"nofollow noopener\">\"7 ways to implement conditional rendering\"</a>.</p>\n<p>Some tricky ones to remember, but can be very helpful are:</p>\n<ul>\n<li>\n<p>AND (<code>&#x26;&#x26;</code>) operator to show or hide</p>\n<ul>\n<li>You can use <code>{shouldShowBool &#x26;&#x26; &#x3C;div>I'll only show up if shouldShowBool is true!&#x3C;/div>}</code></li>\n<li>This works because in JS, <code>A &#x26;&#x26; B</code> returns B if A is true, <strong><em>without</em></strong> coercing B to a boolean</li>\n</ul>\n</li>\n<li>\n<p>Ternary Operator (<code>_?_:_</code>) to swap between things</p>\n<ul>\n<li>You can use <code>{isLeaving ? &#x3C;p>Goodbye!&#x3C;/p> : &#x3C;p>Hello!&#x3C;/p>}</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"loop--array-render\" style=\"position:relative;\"><a href=\"#loop--array-render\" aria-label=\"loop  array render permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Loop / array render</h3>\n<p>The main way to render an array of something in React is to simply pass an array of JSX, within a <em>JavaScript Expression</em> block (e.g. <code>{myJsxArr}</code>). However, there are many ways to write this code:</p>\n<p>You could:</p>\n<ul>\n<li>Create an array of JSX template code assigned to a variable, and use it within <code>render()</code>, with something like: <code>items.push(&#x3C;div key={UNIQUE_KEY}>{CONTENT}&#x3C;/div>);</code></li>\n<li>\n<p>Iterate over the items directly in <code>render()</code>, and return the template there:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cookies'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Use an IIFE to construct and return the array, all inline within the JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">One through Ten:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> jsxArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tjsxArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Number </span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> jsxArr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>This is kind of an anti-pattern, so I would avoid and instead construct the array further up in the component before starting to return JSX / HTML.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react-hooks\" style=\"position:relative;\"><a href=\"#react-hooks\" aria-label=\"react hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React Hooks</h2>\n<p>See <a href=\"./react-hooks.md\">my separate cheat sheet</a>.</p>\n<h2 id=\"react---typescript-and-tsx\" style=\"position:relative;\"><a href=\"#react---typescript-and-tsx\" aria-label=\"react   typescript and tsx permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - TypeScript and TSX</h2>\n<blockquote>\n<p>👉I also have <a href=\"../typescript.md\">a general cheat sheet on TypeScript</a> you might find helpful!</p>\n</blockquote>\n<h3 id=\"react---typescript-and-tsx---resources\" style=\"position:relative;\"><a href=\"#react---typescript-and-tsx---resources\" aria-label=\"react   typescript and tsx   resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - TypeScript and TSX - Resources</h3>\n<ul>\n<li><a href=\"../typescript.md\">My General TS Cheat Sheet</a></li>\n<li><a href=\"https://github.com/typescript-cheatsheets/react\" target=\"_blank\" rel=\"nofollow noopener\">typescript-cheatsheets/react</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\" target=\"_blank\" rel=\"nofollow noopener\">TypeScript Handbook - JSX</a></li>\n<li>@ddprrt: <a href=\"https://fettblog.eu/typescript-react/components/\" target=\"_blank\" rel=\"nofollow noopener\">TypeScript and React: Components</a></li>\n</ul>\n<h3 id=\"react---common-ts-issues\" style=\"position:relative;\"><a href=\"#react---common-ts-issues\" aria-label=\"react   common ts issues permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - Common TS Issues</h3>\n<ul>\n<li>\n<p>Error using component: <code>'__' cannot be used as a JSX component. Its return type '___' is not a valid JSX element.</code> + <code>ts(2786)</code></p>\n<ul>\n<li>Read the full error message to be sure, but this could be because you indeed have something unsafe or incorrectly typed</li>\n<li>\n<p>In some cases, this can be caused by type definition files <a href=\"https://stackoverflow.com/a/53859712/11447682\" target=\"_blank\" rel=\"nofollow noopener\">getting \"out of sync\"</a>. Especially if the specific error is that the return type might be <code>null</code>, but you know it shouldn't be</p>\n<ul>\n<li>Try completely deleting <code>node_modules</code>, all lock files, and then re-installing</li>\n</ul>\n</li>\n<li>Does adding <code>@types/react</code> as a devDependency fix it?</li>\n<li>Are you using <code>Preact</code>? You might want to take a look at <a href=\"https://github.com/scurker/preact-and-typescript\" target=\"_blank\" rel=\"nofollow noopener\">scurker/preact-and-typescript guide</a>, or see if <a href=\"https://joshuatz.com/posts/2020/fixing-jsx-types-between-preact-and-react-libraries/\" target=\"_blank\" rel=\"nofollow noopener\">this specific issue (around preact/compat) applies</a>.</li>\n</ul>\n</li>\n<li>\n<p><code>Cannot find name '___'</code></p>\n<ul>\n<li>Did you accidentally name your file with <code>.ts</code> instead of <code>.tsx</code>?</li>\n<li>Make sure you have configured the <code>jsx</code> and <code>jsxFactory</code> in <code>compilerOptions</code> in the TSConfig</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"react---common-ts-syntax-stuff\" style=\"position:relative;\"><a href=\"#react---common-ts-syntax-stuff\" aria-label=\"react   common ts syntax stuff permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - Common TS Syntax Stuff</h3>\n<ul>\n<li>Declaring prop types</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// All of the below are acceptable</span>\n\n<span class=\"token comment\">// We can define the shape of props separately</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BirthdayProps</span> <span class=\"token punctuation\">{</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> BirthdayProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// ...or, we can inline it</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// And we can also use destructuring for easier nested prop access:</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> age<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>Reusing Prop Types / Extracting Prop Types</p>\n<ul>\n<li>\n<p>You can use <code>ComponentProps&#x3C;typeof MyComponent></code> (or <code>ComponentPropsWithoutRef</code>)</p>\n<ul>\n<li>For standard elements, you can use with string constant <code>ComponentProps&#x3C;'div'></code></li>\n</ul>\n</li>\n<li>Optimally, if using a library that separately exports Prop types, import &#x26; use that directly (e.g. <code>import {BoxProps} from '@chakra-ui/core'</code>)</li>\n<li>Another alternative is <code>JSX.IntrinsicElements[\"div\"]</code>, but this is not recommended.</li>\n<li>See <a href=\"https://stackoverflow.com/a/59137835/11447682\" target=\"_blank\" rel=\"nofollow noopener\">this S/O answer</a></li>\n<li>TS React Cheatsheet: <a href=\"https://github.com/typescript-cheatsheets/react/blob/main/docs/advanced/patterns_by_usecase.md#wrappingmirroring-a-html-element\" target=\"_blank\" rel=\"nofollow noopener\">\"Wrapping/Mirroring a HTML element</a></li>\n</ul>\n</li>\n<li>\n<p>Taking generic props / extending another component props</p>\n<ul>\n<li>It kind of depends on how specific you want to be, and what exact ecosystem you are using (<code>react</code>, <code>preact</code>, etc.)</li>\n<li>\n<p>It is usually best to combine your custom props with either:</p>\n<ul>\n<li>\n<p>A props interface exported from your framework (e.g. <code>BoxProps</code> from Chakra UI)</p>\n<ul>\n<li>Or...</li>\n</ul>\n</li>\n<li>\n<p><code>React.ComponentProps&#x3C;T></code> utility</p>\n<ul>\n<li>See reusing prop types section above for details</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Example: Custom component that allows parent to pass all standard <code>&#x3C;div></code> props 👇</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props <span class=\"token operator\">&amp;</span> ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token string\">'div'</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myComponent'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Accepting components through props / passing children</p>\n<ul>\n<li>The type signature of children is kind of tricky in React. In general, practically anything can be a child, so the type is pretty wide.</li>\n<li>\n<p>In standard React:</p>\n<ul>\n<li>the type for props that accept children looks like this: <code>P &#x26; { children?: ReactNode };</code> (<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L825\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>\n<p>And <code>ReactNode</code> can practically be anything:</p>\n<ul>\n<li><code>type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;</code> (<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L239\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>This gets expanded even further...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>In <code>preact</code>:</p>\n<ul>\n<li>Type for props with children looks like: <code>P &#x26; { children: ComponentChildren }</code> (<a href=\"https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L15\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>Just like in React, this gets expanded until it represents practically anything (<a href=\"https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L46-L54\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Typing DOM events and change handlers</p>\n<ul>\n<li>There are multiple ways to do this</li>\n<li>\n<p>If you are trying to type the <code>evt</code> for an event handler, you can...</p>\n<ul>\n<li>\n<p>Use a type that accepts a generic slot for the event-generating element:</p>\n<ul>\n<li><code>evt: MouseEvent&#x3C;{ElementType}></code></li>\n<li><code>evt: TargetedEvent&#x3C;{ElementType}, Event></code></li>\n<li><code>evt: TargetedEvent&#x3C;{ElementType}, {EventSubType}></code></li>\n<li>Example: <code>TargetedEvent&#x3C;HTMLButtonElement, MouseEvent></code></li>\n</ul>\n</li>\n<li>\n<p>Merge a generic event type with an explicit type for <code>evt.target</code>:</p>\n<ul>\n<li><code>evt: MouseEvent&#x3C;HTMLButtonElement> &#x26; {target: HTMLButtonElement}</code></li>\n<li><code>evt: h.JSX.TargetedEvent&#x3C;HTMLSelectElement, Event> &#x26; {target: HTMLSelectElement}</code></li>\n<li><code>evt: InputEvent &#x26; {target: HTMLSelectElement</code></li>\n</ul>\n</li>\n<li>\n<p>Use the direct type, if you have it:</p>\n<ul>\n<li><code>onClick={(evt: MouseEvent) => {}}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If you are trying to type the element of <code>evt.target</code>, you can just type assert for that section:</p>\n<ul>\n<li><code>evt.target as HTMLInputElement</code></li>\n</ul>\n</li>\n<li>Some of this also depends on React vs Preact, framework libs, etc.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"material-ui-notes\" style=\"position:relative;\"><a href=\"#material-ui-notes\" aria-label=\"material ui notes permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Material-UI Notes</h2>\n<h3 id=\"material-ui-media-queries\" style=\"position:relative;\"><a href=\"#material-ui-media-queries\" aria-label=\"material ui media queries permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Material-UI: Media Queries</h3>\n<p>In general, the <a href=\"https://material-ui.com/customization/breakpoints/\" target=\"_blank\" rel=\"nofollow noopener\">docs on breakpoints</a> are a good place to start. Here are a few options:</p>\n<ul>\n<li>\n<p>You can use them directly in <code>makeStyles</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> useStyles <span class=\"token operator\">=</span> <span class=\"token function\">makeStyles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theme</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tmyStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'@media (min-width: 1000px)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'400px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">// Or, with theme settings</span>\n\t\t<span class=\"token comment\">// https://material-ui.com/customization/breakpoints/#css-media-queries</span>\n\t\t<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'200px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>You can use the provided <a href=\"https://material-ui.com/customization/breakpoints/#usemediaquery-hook\" target=\"_blank\" rel=\"nofollow noopener\"><code>useMediaQuery</code> hooks</a></li>\n</ul>",
        "rawMarkdownBody": "\n## Other resources\n\nMy other pages:\n - [React Hooks](./react-hooks.md)\n - [React Performance and Optimizations](./react-performance-optimization.md)\n\nExternal resources:\n\nWhat & Link | Type\n--- | --- | ---\n\"The React Handbook\" by Flavio Copes - [Online version](https://www.freecodecamp.org/news/the-react-handbook-b71c27b0a795/) [PDF signup](https://flaviocopes.com/page/react-handbook/)<br>&nbsp;&nbsp;&nbsp;---> Amazing resource! | Guide\n[\"React for Vue Developers\"](https://sebastiandedeyne.com/react-for-vue-developers/) by Sebastian De Deyne | Guide / Cheatsheet\n[React Lifecycles Method Diagram](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) | Cheatsheet\n[React+TypeScript Cheatsheets](https://github.com/typescript-cheatsheets/react-typescript-cheatsheet)<br/>&nbsp;&nbsp;&nbsp; - [Live Website](https://react-typescript-cheatsheet.netlify.app/) | Cheatsheet\n[React Redux TypeScript Guide](https://github.com/piotrwitek/react-redux-typescript-guide) | Cheatsheet\nPluralSight: [Composing React Components with TypeScript](https://www.pluralsight.com/guides/composing-react-components-with-typescript) | Guide\nPost: [\"You Probably Don't Need Derived State\"](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) | Guide\nCollection: [enaqx/awesome-react](https://github.com/enaqx/awesome-react) | Collection\nKent C. Dodds - [\"Super Simple Start to React\"](https://kentcdodds.com/blog/super-simple-start-to-react) | Guide\nSteven Jin: [Cheat Sheet for React Interview, 2020](https://medium.com/@stevenjinyi/study-sheet-for-react-interview-questions-2020-2fe25b8fa316) | Refresher / Cheatsheet\n[learning-zone/react-interview-questions](https://github.com/learning-zone/react-interview-questions) | Refresher / Cheatsheet\n\n## Binding template literal\n\nBinding template literal to property expecting string:\nYou have to use double brackets to \"break out\" of JSX and into regular JS.\nInstead of:\n```jsx\n<SEO title=\"`${props.pageContext.slug}`\" />\n```\nYou need:\n```jsx\n<SEO title={`${props.pageContext.slug}`} />\n```\n\n### Creating unique keys\nYou want a unique identifier, which is actually harder than one might expect to create. Using the `index` provided within a loop is not recommended, and even combining with something like `(new Date()).getTime()` is not guaranteed to be unique.\n\nThere are tons of packages out there that you can drop in to create unique Ids. Or just make a composite key out of enough unique parameters to ensure non-duplicates.\n\n## Misc / How Do I...\n - You can now use empty elements, known as *fragments*, to wrap siblings:\n\t- `<><div></div><div></div></>`\n - Issues returning JSX?\n\t - More than one line? Make sure wrapped in parenthesis `return (<div></div>)`\n\t - Make sure there is *only **one*** root level element\n - Pass a bunch of options to a component as props (basically convert JS Obj to props)\n\t - Just use spread operator - `{...props}`\n\t - You can use this re-use the same props across multiple components!\n\t - Be careful about directly spreading vs capturing via rest parameters and then spreading - you might not want to pass *all* props to child component\n\t\t - This is why you often see `const {myVarA, myVarB, ...restProps} = props;` inside components -> `restProps` would be a subset of `props` that does not contain `myVarA` or `myVarB`\n - Simulate a change event on a `<input>` element\n\t - Use a combination of an exposed setter with a manual event dispatch\n\t - See https://stackoverflow.com/a/46012210/11447682\n - How to add an external stylesheet (not for bundling)\n\t - Instead of using `import` within a JS file (like *App.js*), add the stylesheet directly as a link tag element in the **HTML** file (e.g. `<link rel=\"stylesheet\" href=\"https://.../style.css\" />`)\n - How do I access an element directly (similar to native browser APIs like `document.getElementById`) in React? How do I get the DOM node?\n\t - That is a great use case for React `refs`! - [Docs](https://reactjs.org/docs/refs-and-the-dom.html)\n\t - Options:\n\t\t - Newest and recommended: [`useRef` hook](https://reactjs.org/docs/hooks-reference.html#useref)\n\t\t\t - `myRef = useRef(null)`\n\t\t - Older:- `this.myRef = React.createRef()` in class constructor\n\t - You can access DOM node through `myRef.current`, after attaching via `<MyElement ref={myRef}/>`\n - How do I expose and call a function from a child component in a parent component (aka passing methods up through the component tree)?\n\t - This is considered a bit of an *anti-pattern* with React, and is generally avoided entirely (things are always passed down, not up).\n\t - However, there are still ways to do so - the main way is to use refs ([S/O](https://stackoverflow.com/a/37950970/11447682), [Docs](https://reactjs.org/docs/refs-and-the-dom.html))\n - What's with the `{}` curly braces? Is this Mustache or Handlebars templating?\n\t- No, the curly braces simply tell the JSX compiler that you are about to give it something that should be evaluated as a ***JavaScript Expression***, rather than a string or component.\n\n## Tips\n - You can assign JSX to variables! Makes it very easy to reuse!\n - Make use of object destructuring assignments to avoid repetitive props syntax\n\t - `const {hidden, dataArr, isAdmin, isAuthed} = this.props`\n\t - -> Or, destructure right in function argument, `const myComponent = ({hidden, dataArr, isAdmin, isAuthed}) => {}`\n - You can use class members and/or regular vars to hold changing values, as opposed to putting in state/props, if you want to avoid unnecessary renders when those values are not part of UI\n\n## Asset management and usage\nYou have two main options when it comes to asset management:\n - [Public Folder](https://create-react-app.dev/docs/using-the-public-folder): Place in `/public`\n\t - Pull into HTML with `%PUBLIC_URL%`\n\t - Pull into JS with `process.env.PUBLIC_URL`\n - [Bundling](https://create-react-app.dev/docs/adding-images-fonts-and-files): Place asset files *alongside* JS, in `/src`\n\t - Pull into JS by using `import` at top of file with relatively path\n\t - Pull into css (e.g. for background image) with relative path\n\nThe second option [is *always* preferred](https://create-react-app.dev/docs/adding-images-fonts-and-files), since it uses webpack to bundle assets and will help keep the size of your app down by only bundling assets that are actually used (as well as some other tricks).\n\n### Importing assets in JS or CSS\nExamples:\n\nJS:\n```js\nimport background from './assets/background.jpg';\n// ...\nrender() {\n\treturn (\n\t\t<img src={background} />\n\t)\n}\n```\nCSS:\n```css\n#main {\n\tbackground-image: url(./assets/background.jpg);\n}\n```\n\n## Getting around method binding of `this`\nA common issue with React is preserving the value of `this`, especially when it comes to event handlers, like `onClick`.\n\nIf the callback you are assigning uses `this` within its body, you will have issues if the value of `this` changes (most often in a `Cannot read property '___' of undefined` error).\n\nHere are some ways to ensure the value of `this` stays the way you want it to:\n\n### Explicit, with `.bind()` on the attribute\nThe older method was commonly to use `.bind()` to explicitly bind the value of this at the point of attaching the handler. That might look something like this:\n\n```jsx\n<CustomComponent onClick={this.handleEvent.bind(this)}>\n```\n\n### ES6 Class binding\nIf you are using the new ES6 class syntax, you have all the other options, plus a few more. Let's say this is our base code:\n```jsx\nclass MyComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {counter: 0};\n\t}\n\n\thandleClick(evt) {\n\t\tconst updatedCount = this.state.counter + 1;\n\t\tthis.setState({\n\t\t\tcounter: updatedCount\n\t\t});\n\t\tconsole.log(this.state.counter);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<button onClick={this.handleClick}> Counter + </button>\n\t\t);\n\t}\n}\n```\n\nOne option is to use `.bind()`, in the constructor:\n```jsx\nconstructor(props) {\n\tsuper(props);\n\tthis.state = {counter: 0};\n\t// ADDED:\n\tthis.handleClick = this.handleClick.bind(this);\n}\n```\n\nAnother option is to turn the `handleClick` method, into a *member*, that is the value of an arrow function, thus automatically binding `this` to the class:\n```js\n// Rest of class definition\n// Or: public handleClick = (evt) => {}\nhandleClick = (evt) => {\n\tconst updatedCount = this.state.counter + 1;\n\tthis.setState({\n\t\tcounter: updatedCount\n\t});\n\tconsole.log(this.state.counter);\n}\n// ...\n```\n\n> Technically, this is actually an ES6 *public field*, which is, as of 2019, in an experimental stage, so while it is well supported with transpiled JS/TS, it has limited native browser support.\n\n### Inline arrow functions\nOne of the benefits (or drawbacks) of arrow functions is that they lexically bind `this` - **automatically**. So, if you do:\n```jsx\n<CustomComponent onClick={(evt) => {\n\tthis.handleEvent(evt);\n}}>\n```\nIt doesn't matter if `CustomComponent` has a different `this` scope, because the arrow function binds the callback where you defined it!\n\n### Use `createReactClass`\nIf you use `createReactClass`, you generally don't have to worry about this issue, as [createReactClass uses autobinding](https://reactjs.org/docs/react-without-es6.html#autobinding), which basically does `.bind()` for you.\n\n### More reading\n - http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html\n - https://www.sitepoint.com/bind-javascripts-this-keyword-react/\n\n---\n\n## Computed properties\n\nUnlike Vue, which has a specific syntax for computed properties, React doesn't really care how you try to formulate values based on computed state properties.\n\n### ES6 Class - Getter\nWith the new ES6 class based approach, a very clean solution is to use *getters*, with something like:\n```js\nclass MyComponent extends React.Component {\n\t// ... class stuff\n\tget isAdult() {\n\t\treturn typeof(this.state.age) === 'number' && this.state.age > 18;\n\t}\n}\n```\n\n### Within the render function itself\nThere is nothing preventing you from computing a value within the `render` function itself. For example:\n```js\nclass MyComponent extends React.Component {\n\t// ... class stuff\n\trender() {\n\t\tconst isAdult = typeof(this.state.age) === 'number' && this.state.age > 18;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tIs adult = {isAdult.toString()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n### As a function\nAnother vanilla solution here is to simply use a function to return the computed value, rather than anything else. How you declare this is up to you:\n - Explicitly, with `function myFunction(){}`\n - As a ES6 class member\n\t - `public isAdult() {}`\n - With an arrow function to bind `this`\n\t - `const isAdult = () => {};`\n - Etc.\n\nTo use within your `render` method, simply make sure you actually execute it by following it with the parenthesis and arguments if applicable.\n\n### State management system\nIf you are using a dedicated state management system, there is a chance that what you are using might already have something in place to not only provide explicit computed properties, but also optimize them, to prevent redundant expensive re-calculations.\n\nFor example, if you use MobX, make sure to check out [this page](https://mobx.js.org/refguide/computed-decorator.html) on *computed values*.\n\n### Further reading:\n - https://daveceddia.com/computed-properties-in-react/\n\n---\n\n## Handlebars / Mustache type logic (loops, conditional, etc)\n### Conditional rendering\nTons of options - see [\"7 ways to implement conditional rendering\"](https://scotch.io/tutorials/7-ways-to-implement-conditional-rendering-in-react-applications).\n\nSome tricky ones to remember, but can be very helpful are:\n - AND (`&&`) operator to show or hide\n\t - You can use `{shouldShowBool && <div>I'll only show up if shouldShowBool is true!</div>}`\n\t - This works because in JS, `A && B` returns B if A is true, ***without*** coercing B to a boolean\n - Ternary Operator (`_?_:_`) to swap between things\n\t - You can use `{isLeaving ? <p>Goodbye!</p> : <p>Hello!</p>}`\n\n### Loop / array render\nThe main way to render an array of something in React is to simply pass an array of JSX, within a *JavaScript Expression* block (e.g. `{myJsxArr}`). However, there are many ways to write this code:\n\nYou could:\n - Create an array of JSX template code assigned to a variable, and use it within `render()`, with something like: `items.push(<div key={UNIQUE_KEY}>{CONTENT}</div>);`\n - Iterate over the items directly in `render()`, and return the template there:\n\t```jsx\n\tconst render = function() {\n\t\tconst items = ['bread', 'milk', 'cookies'];\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t{items.map((value, index) => {\n\t\t\t\t\treturn <li key={index}>{value}</li>\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t);\n\t}\n\t```\n - Use an IIFE to construct and return the array, all inline within the JSX:\n\t```jsx\n\t<div>\n\t\t<h1>One through Ten:</h1>\n\t\t{(function () {\n\t\t\tconst jsxArr = [];\n\t\t\tfor (let x = 1; x <= 10; x++) {\n\t\t\t\tjsxArr.push(<p key={x}>Number {x}</p>);\n\t\t\t}\n\t\t\treturn jsxArr;\n\t\t})()}\n\t</div>\n\t```\n\t - This is kind of an anti-pattern, so I would avoid and instead construct the array further up in the component before starting to return JSX / HTML.\n\n## React Hooks\nSee [my separate cheat sheet](./react-hooks.md).\n\n## React - TypeScript and TSX\n> 👉I also have [a general cheat sheet on TypeScript](../typescript.md) you might find helpful!\n\n### React - TypeScript and TSX - Resources\n - [My General TS Cheat Sheet](../typescript.md)\n - [typescript-cheatsheets/react](https://github.com/typescript-cheatsheets/react)\n - [TypeScript Handbook - JSX](https://www.typescriptlang.org/docs/handbook/jsx.html)\n - @ddprrt: [TypeScript and React: Components](https://fettblog.eu/typescript-react/components/)\n\n### React - Common TS Issues\n - Error using component: `'__' cannot be used as a JSX component. Its return type '___' is not a valid JSX element.` + `ts(2786)`\n\t - Read the full error message to be sure, but this could be because you indeed have something unsafe or incorrectly typed\n\t - In some cases, this can be caused by type definition files [getting \"out of sync\"](https://stackoverflow.com/a/53859712/11447682). Especially if the specific error is that the return type might be `null`, but you know it shouldn't be\n\t\t - Try completely deleting `node_modules`, all lock files, and then re-installing\n\t - Does adding `@types/react` as a devDependency fix it?\n\t - Are you using `Preact`? You might want to take a look at [scurker/preact-and-typescript guide](https://github.com/scurker/preact-and-typescript), or see if [this specific issue (around preact/compat) applies](https://joshuatz.com/posts/2020/fixing-jsx-types-between-preact-and-react-libraries/).\n - `Cannot find name '___'`\n\t - Did you accidentally name your file with `.ts` instead of `.tsx`?\n\t - Make sure you have configured the `jsx` and `jsxFactory` in `compilerOptions` in the TSConfig\n\n### React - Common TS Syntax Stuff\n - Declaring prop types\n\n```tsx\n// All of the below are acceptable\n\n// We can define the shape of props separately\ninterface BirthdayProps {\n\tage: number;\n\tname: string;\n}\nexport const BirthdayGreeting = (props: BirthdayProps) => (\n\t<span>{`Congrats ${props.name} on turning ${props.age}`}</span>\n);\n\n\n// ...or, we can inline it\nexport const BirthdayGreeting = (props: { age: number; name: string }) => (\n\t<span>{`Congrats ${props.name} on turning ${props.age}`}</span>\n);\n\n// And we can also use destructuring for easier nested prop access:\nexport const BirthdayGreeting = ({ age, name }: { age: number; name: string }) => (\n\t<span>{`Congrats ${name} on turning ${age}`}</span>\n);\n```\n\n - Reusing Prop Types / Extracting Prop Types\n\t - You can use `ComponentProps<typeof MyComponent>` (or `ComponentPropsWithoutRef`)\n\t\t - For standard elements, you can use with string constant `ComponentProps<'div'>`\n\t - Optimally, if using a library that separately exports Prop types, import & use that directly (e.g. `import {BoxProps} from '@chakra-ui/core'`)\n\t - Another alternative is `JSX.IntrinsicElements[\"div\"]`, but this is not recommended.\n\t - See [this S/O answer](https://stackoverflow.com/a/59137835/11447682)\n\t - TS React Cheatsheet: [\"Wrapping/Mirroring a HTML element](https://github.com/typescript-cheatsheets/react/blob/main/docs/advanced/patterns_by_usecase.md#wrappingmirroring-a-html-element)\n - Taking generic props / extending another component props\n\t - It kind of depends on how specific you want to be, and what exact ecosystem you are using (`react`, `preact`, etc.)\n\t - It is usually best to combine your custom props with either:\n\t\t - A props interface exported from your framework (e.g. `BoxProps` from Chakra UI)\n\t\t\t - Or...\n\t\t - `React.ComponentProps<T>` utility\n\t\t\t - See reusing prop types section above for details\n\t - Example: Custom component that allows parent to pass all standard `<div>` props 👇\n\t\t```tsx\n\t\tinterface Props {\n\t\t\tname: string;\n\t\t}\n\n\t\tconst MyComponent = (props: Props & ComponentProps<'div'>) => {\n\t\t\treturn (\n\t\t\t\t<div {...props} className={['myComponent', props.className].join(' ')}>\n\t\t\t\t\t<span>Hello {props.name}</span>\n\t\t\t\t</div>\n\t\t\t)\n\t\t};\n\t\t```\n - Accepting components through props / passing children\n\t - The type signature of children is kind of tricky in React. In general, practically anything can be a child, so the type is pretty wide.\n\t - In standard React:\n\t\t - the type for props that accept children looks like this: `P & { children?: ReactNode };` ([src](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L825))\n\t\t - And `ReactNode` can practically be anything:\n\t\t\t - `type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;` ([src](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L239))\n\t\t\t - This gets expanded even further...\n\t - In `preact`:\n\t\t - Type for props with children looks like: `P & { children: ComponentChildren }` ([src](https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L15))\n\t\t - Just like in React, this gets expanded until it represents practically anything ([src](https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L46-L54))\n - Typing DOM events and change handlers\n\t - There are multiple ways to do this\n\t - If you are trying to type the `evt` for an event handler, you can...\n\t\t - Use a type that accepts a generic slot for the event-generating element:\n\t\t\t - `evt: MouseEvent<{ElementType}>`\n\t\t\t - `evt: TargetedEvent<{ElementType}, Event>`\n\t\t\t - `evt: TargetedEvent<{ElementType}, {EventSubType}>`\n\t\t\t - Example: `TargetedEvent<HTMLButtonElement, MouseEvent>`\n\t\t - Merge a generic event type with an explicit type for `evt.target`:\n\t\t\t - `evt: MouseEvent<HTMLButtonElement> & {target: HTMLButtonElement}`\n\t\t\t - `evt: h.JSX.TargetedEvent<HTMLSelectElement, Event> & {target: HTMLSelectElement}`\n\t\t\t - `evt: InputEvent & {target: HTMLSelectElement`\n\t\t - Use the direct type, if you have it:\n\t\t\t - `onClick={(evt: MouseEvent) => {}}`\n\t - If you are trying to type the element of `evt.target`, you can just type assert for that section:\n\t\t - `evt.target as HTMLInputElement`\n\t - Some of this also depends on React vs Preact, framework libs, etc.\n\n## Material-UI Notes\n### Material-UI: Media Queries\nIn general, the [docs on breakpoints](https://material-ui.com/customization/breakpoints/) are a good place to start. Here are a few options:\n\n - You can use them directly in `makeStyles`:\n\t```js\n\tconst useStyles = makeStyles(theme => ({\n\t\tmyStyle: {\n\t\t\twidth: '100px',\n\t\t\t'@media (min-width: 1000px)': {\n\t\t\t\twidth: '400px',\n\t\t\t},\n\t\t\t// Or, with theme settings\n\t\t\t// https://material-ui.com/customization/breakpoints/#css-media-queries\n\t\t\t[theme.breakpoints.up('sm')]: {\n\t\t\t\twidth: '200px',\n\t\t\t},\n\t\t}\n\t}));\n\t```\n - You can use the provided [`useMediaQuery` hooks](https://material-ui.com/customization/breakpoints/#usemediaquery-hook)",
        "fileAbsolutePath": "/opt/build/repo/md/cheatsheets/react/index.md",
        "tableOfContents": "<ul>\n<li><a href=\"/cheatsheets/react/#other-resources\">Other resources</a></li>\n<li>\n<p><a href=\"/cheatsheets/react/#binding-template-literal\">Binding template literal</a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#creating-unique-keys\">Creating unique keys</a></li>\n</ul>\n</li>\n<li><a href=\"/cheatsheets/react/#misc--how-do-i\">Misc / How Do I...</a></li>\n<li><a href=\"/cheatsheets/react/#tips\">Tips</a></li>\n<li>\n<p><a href=\"/cheatsheets/react/#asset-management-and-usage\">Asset management and usage</a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#importing-assets-in-js-or-css\">Importing assets in JS or CSS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cheatsheets/react/#getting-around-method-binding-of-this\">Getting around method binding of <code>this</code></a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#explicit-with-bind-on-the-attribute\">Explicit, with <code>.bind()</code> on the attribute</a></li>\n<li><a href=\"/cheatsheets/react/#es6-class-binding\">ES6 Class binding</a></li>\n<li><a href=\"/cheatsheets/react/#inline-arrow-functions\">Inline arrow functions</a></li>\n<li><a href=\"/cheatsheets/react/#use-createreactclass\">Use <code>createReactClass</code></a></li>\n<li><a href=\"/cheatsheets/react/#more-reading\">More reading</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cheatsheets/react/#computed-properties\">Computed properties</a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#es6-class---getter\">ES6 Class - Getter</a></li>\n<li><a href=\"/cheatsheets/react/#within-the-render-function-itself\">Within the render function itself</a></li>\n<li><a href=\"/cheatsheets/react/#as-a-function\">As a function</a></li>\n<li><a href=\"/cheatsheets/react/#state-management-system\">State management system</a></li>\n<li><a href=\"/cheatsheets/react/#further-reading\">Further reading:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cheatsheets/react/#handlebars--mustache-type-logic-loops-conditional-etc\">Handlebars / Mustache type logic (loops, conditional, etc)</a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#conditional-rendering\">Conditional rendering</a></li>\n<li><a href=\"/cheatsheets/react/#loop--array-render\">Loop / array render</a></li>\n</ul>\n</li>\n<li><a href=\"/cheatsheets/react/#react-hooks\">React Hooks</a></li>\n<li>\n<p><a href=\"/cheatsheets/react/#react---typescript-and-tsx\">React - TypeScript and TSX</a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#react---typescript-and-tsx---resources\">React - TypeScript and TSX - Resources</a></li>\n<li><a href=\"/cheatsheets/react/#react---common-ts-issues\">React - Common TS Issues</a></li>\n<li><a href=\"/cheatsheets/react/#react---common-ts-syntax-stuff\">React - Common TS Syntax Stuff</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cheatsheets/react/#material-ui-notes\">Material-UI Notes</a></p>\n<ul>\n<li><a href=\"/cheatsheets/react/#material-ui-media-queries\">Material-UI: Media Queries</a></li>\n</ul>\n</li>\n</ul>",
        "headings": [
          {
            "depth": 2,
            "value": "Other resources"
          },
          {
            "depth": 2,
            "value": "Binding template literal"
          },
          {
            "depth": 3,
            "value": "Creating unique keys"
          },
          {
            "depth": 2,
            "value": "Misc / How Do I..."
          },
          {
            "depth": 2,
            "value": "Tips"
          },
          {
            "depth": 2,
            "value": "Asset management and usage"
          },
          {
            "depth": 3,
            "value": "Importing assets in JS or CSS"
          },
          {
            "depth": 2,
            "value": "Getting around method binding of this"
          },
          {
            "depth": 3,
            "value": "Explicit, with .bind() on the attribute"
          },
          {
            "depth": 3,
            "value": "ES6 Class binding"
          },
          {
            "depth": 3,
            "value": "Inline arrow functions"
          },
          {
            "depth": 3,
            "value": "Use createReactClass"
          },
          {
            "depth": 3,
            "value": "More reading"
          },
          {
            "depth": 2,
            "value": "Computed properties"
          },
          {
            "depth": 3,
            "value": "ES6 Class - Getter"
          },
          {
            "depth": 3,
            "value": "Within the render function itself"
          },
          {
            "depth": 3,
            "value": "As a function"
          },
          {
            "depth": 3,
            "value": "State management system"
          },
          {
            "depth": 3,
            "value": "Further reading:"
          },
          {
            "depth": 2,
            "value": "Handlebars / Mustache type logic (loops, conditional, etc)"
          },
          {
            "depth": 3,
            "value": "Conditional rendering"
          },
          {
            "depth": 3,
            "value": "Loop / array render"
          },
          {
            "depth": 2,
            "value": "React Hooks"
          },
          {
            "depth": 2,
            "value": "React - TypeScript and TSX"
          },
          {
            "depth": 3,
            "value": "React - TypeScript and TSX - Resources"
          },
          {
            "depth": 3,
            "value": "React - Common TS Issues"
          },
          {
            "depth": 3,
            "value": "React - Common TS Syntax Stuff"
          },
          {
            "depth": 2,
            "value": "Material-UI Notes"
          },
          {
            "depth": 3,
            "value": "Material-UI: Media Queries"
          }
        ],
        "frontmatter": {
          "title": "React / JSX - Cheatsheet",
          "description": null
        },
        "fields": {
          "slug": "/cheatsheets/react/",
          "title": "React / JSX - Cheatsheet",
          "createdStampMs": 1566419461000,
          "modifiedStampMs": 1609497777000
        },
        "parent": {
          "__typename": "File",
          "name": "index",
          "modifiedTime": "2021-01-04T20:26:28.994Z"
        }
      }
    },
    "pageContext": {
      "slug": "/cheatsheets/react/",
      "modifiedHtml": "<h2 id=\"other-resources\" style=\"position:relative;\"><a href=\"#other-resources\" aria-label=\"other resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Other resources</h2>\n<p>My other pages:</p>\n<ul>\n<li><a href=\"/cheatsheets/react/react-hooks/\">React Hooks</a></li>\n<li><a href=\"/cheatsheets/react/react-performance-optimization/\">React Performance and Optimizations</a></li>\n</ul>\n<p>External resources:</p>\n<table>\n<thead>\n<tr>\n<th>What &#x26; Link</th>\n<th>Type</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"The React Handbook\" by Flavio Copes - <a href=\"https://www.freecodecamp.org/news/the-react-handbook-b71c27b0a795/\" target=\"_blank\" rel=\"nofollow noopener\">Online version</a> <a href=\"https://flaviocopes.com/page/react-handbook/\" target=\"_blank\" rel=\"nofollow noopener\">PDF signup</a><br>   ---> Amazing resource!</td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://sebastiandedeyne.com/react-for-vue-developers/\" target=\"_blank\" rel=\"nofollow noopener\">\"React for Vue Developers\"</a> by Sebastian De Deyne</td>\n<td>Guide / Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"nofollow noopener\">React Lifecycles Method Diagram</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\" target=\"_blank\" rel=\"nofollow noopener\">React+TypeScript Cheatsheets</a><br/>    - <a href=\"https://react-typescript-cheatsheet.netlify.app/\" target=\"_blank\" rel=\"nofollow noopener\">Live Website</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/piotrwitek/react-redux-typescript-guide\" target=\"_blank\" rel=\"nofollow noopener\">React Redux TypeScript Guide</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td>PluralSight: <a href=\"https://www.pluralsight.com/guides/composing-react-components-with-typescript\" target=\"_blank\" rel=\"nofollow noopener\">Composing React Components with TypeScript</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Post: <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"nofollow noopener\">\"You Probably Don't Need Derived State\"</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Collection: <a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener\">enaqx/awesome-react</a></td>\n<td>Collection</td>\n<td></td>\n</tr>\n<tr>\n<td>Kent C. Dodds - <a href=\"https://kentcdodds.com/blog/super-simple-start-to-react\" target=\"_blank\" rel=\"nofollow noopener\">\"Super Simple Start to React\"</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Steven Jin: <a href=\"https://medium.com/@stevenjinyi/study-sheet-for-react-interview-questions-2020-2fe25b8fa316\" target=\"_blank\" rel=\"nofollow noopener\">Cheat Sheet for React Interview, 2020</a></td>\n<td>Refresher / Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/learning-zone/react-interview-questions\" target=\"_blank\" rel=\"nofollow noopener\">learning-zone/react-interview-questions</a></td>\n<td>Refresher / Cheatsheet</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"binding-template-literal\" style=\"position:relative;\"><a href=\"#binding-template-literal\" aria-label=\"binding template literal permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Binding template literal</h2>\n<p>Binding template literal to property expecting string:\nYou have to use double brackets to \"break out\" of JSX and into regular JS.\nInstead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SEO</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`${props.pageContext.slug}`<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>You need:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SEO</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>pageContext<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3 id=\"creating-unique-keys\" style=\"position:relative;\"><a href=\"#creating-unique-keys\" aria-label=\"creating unique keys permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Creating unique keys</h3>\n<p>You want a unique identifier, which is actually harder than one might expect to create. Using the <code>index</code> provided within a loop is not recommended, and even combining with something like <code>(new Date()).getTime()</code> is not guaranteed to be unique.</p>\n<p>There are tons of packages out there that you can drop in to create unique Ids. Or just make a composite key out of enough unique parameters to ensure non-duplicates.</p>\n<h2 id=\"misc--how-do-i\" style=\"position:relative;\"><a href=\"#misc--how-do-i\" aria-label=\"misc  how do i permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Misc / How Do I...</h2>\n<ul>\n<li>\n<p>You can now use empty elements, known as <em>fragments</em>, to wrap siblings:</p>\n<ul>\n<li><code>&#x3C;>&#x3C;div>&#x3C;/div>&#x3C;div>&#x3C;/div>&#x3C;/></code></li>\n</ul>\n</li>\n<li>\n<p>Issues returning JSX?</p>\n<ul>\n<li>More than one line? Make sure wrapped in parenthesis <code>return (&#x3C;div>&#x3C;/div>)</code></li>\n<li>Make sure there is *only <strong>one*</strong> root level element</li>\n</ul>\n</li>\n<li>\n<p>Pass a bunch of options to a component as props (basically convert JS Obj to props)</p>\n<ul>\n<li>Just use spread operator - <code>{...props}</code></li>\n<li>You can use this re-use the same props across multiple components!</li>\n<li>\n<p>Be careful about directly spreading vs capturing via rest parameters and then spreading - you might not want to pass <em>all</em> props to child component</p>\n<ul>\n<li>This is why you often see <code>const {myVarA, myVarB, ...restProps} = props;</code> inside components -> <code>restProps</code> would be a subset of <code>props</code> that does not contain <code>myVarA</code> or <code>myVarB</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Simulate a change event on a <code>&#x3C;input></code> element</p>\n<ul>\n<li>Use a combination of an exposed setter with a manual event dispatch</li>\n<li>See <a href=\"https://stackoverflow.com/a/46012210/11447682\" target=\"_blank\" rel=\"nofollow noopener\">https://stackoverflow.com/a/46012210/11447682</a></li>\n</ul>\n</li>\n<li>\n<p>How to add an external stylesheet (not for bundling)</p>\n<ul>\n<li>Instead of using <code>import</code> within a JS file (like <em>App.js</em>), add the stylesheet directly as a link tag element in the <strong>HTML</strong> file (e.g. <code>&#x3C;link rel=\"stylesheet\" href=\"https://.../style.css\" /></code>)</li>\n</ul>\n</li>\n<li>\n<p>How do I access an element directly (similar to native browser APIs like <code>document.getElementById</code>) in React? How do I get the DOM node?</p>\n<ul>\n<li>That is a great use case for React <code>refs</code>! - <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener\">Docs</a></li>\n<li>\n<p>Options:</p>\n<ul>\n<li>\n<p>Newest and recommended: <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\" rel=\"nofollow noopener\"><code>useRef</code> hook</a></p>\n<ul>\n<li><code>myRef = useRef(null)</code></li>\n</ul>\n</li>\n<li>Older:- <code>this.myRef = React.createRef()</code> in class constructor</li>\n</ul>\n</li>\n<li>You can access DOM node through <code>myRef.current</code>, after attaching via <code>&#x3C;MyElement ref={myRef}/></code></li>\n</ul>\n</li>\n<li>\n<p>How do I expose and call a function from a child component in a parent component (aka passing methods up through the component tree)?</p>\n<ul>\n<li>This is considered a bit of an <em>anti-pattern</em> with React, and is generally avoided entirely (things are always passed down, not up).</li>\n<li>However, there are still ways to do so - the main way is to use refs (<a href=\"https://stackoverflow.com/a/37950970/11447682\" target=\"_blank\" rel=\"nofollow noopener\">S/O</a>, <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener\">Docs</a>)</li>\n</ul>\n</li>\n<li>\n<p>What's with the <code>{}</code> curly braces? Is this Mustache or Handlebars templating?</p>\n<ul>\n<li>No, the curly braces simply tell the JSX compiler that you are about to give it something that should be evaluated as a <strong><em>JavaScript Expression</em></strong>, rather than a string or component.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tips\" style=\"position:relative;\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Tips</h2>\n<ul>\n<li>You can assign JSX to variables! Makes it very easy to reuse!</li>\n<li>\n<p>Make use of object destructuring assignments to avoid repetitive props syntax</p>\n<ul>\n<li><code>const {hidden, dataArr, isAdmin, isAuthed} = this.props</code></li>\n<li>-> Or, destructure right in function argument, <code>const myComponent = ({hidden, dataArr, isAdmin, isAuthed}) => {}</code></li>\n</ul>\n</li>\n<li>You can use class members and/or regular vars to hold changing values, as opposed to putting in state/props, if you want to avoid unnecessary renders when those values are not part of UI</li>\n</ul>\n<h2 id=\"asset-management-and-usage\" style=\"position:relative;\"><a href=\"#asset-management-and-usage\" aria-label=\"asset management and usage permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Asset management and usage</h2>\n<p>You have two main options when it comes to asset management:</p>\n<ul>\n<li>\n<p><a href=\"https://create-react-app.dev/docs/using-the-public-folder\" target=\"_blank\" rel=\"nofollow noopener\">Public Folder</a>: Place in <code>/public</code></p>\n<ul>\n<li>Pull into HTML with <code>%PUBLIC_URL%</code></li>\n<li>Pull into JS with <code>process.env.PUBLIC_URL</code></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://create-react-app.dev/docs/adding-images-fonts-and-files\" target=\"_blank\" rel=\"nofollow noopener\">Bundling</a>: Place asset files <em>alongside</em> JS, in <code>/src</code></p>\n<ul>\n<li>Pull into JS by using <code>import</code> at top of file with relatively path</li>\n<li>Pull into css (e.g. for background image) with relative path</li>\n</ul>\n</li>\n</ul>\n<p>The second option <a href=\"https://create-react-app.dev/docs/adding-images-fonts-and-files\" target=\"_blank\" rel=\"nofollow noopener\">is <em>always</em> preferred</a>, since it uses webpack to bundle assets and will help keep the size of your app down by only bundling assets that are actually used (as well as some other tricks).</p>\n<h3 id=\"importing-assets-in-js-or-css\" style=\"position:relative;\"><a href=\"#importing-assets-in-js-or-css\" aria-label=\"importing assets in js or css permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Importing assets in JS or CSS</h3>\n<p>Examples:</p>\n<p>JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> background <span class=\"token keyword\">from</span> <span class=\"token string\">'./assets/background.jpg'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CSS:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./assets/background.jpg<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"getting-around-method-binding-of-this\" style=\"position:relative;\"><a href=\"#getting-around-method-binding-of-this\" aria-label=\"getting around method binding of this permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Getting around method binding of <code>this</code></h2>\n<p>A common issue with React is preserving the value of <code>this</code>, especially when it comes to event handlers, like <code>onClick</code>.</p>\n<p>If the callback you are assigning uses <code>this</code> within its body, you will have issues if the value of <code>this</code> changes (most often in a <code>Cannot read property '___' of undefined</code> error).</p>\n<p>Here are some ways to ensure the value of <code>this</code> stays the way you want it to:</p>\n<h3 id=\"explicit-with-bind-on-the-attribute\" style=\"position:relative;\"><a href=\"#explicit-with-bind-on-the-attribute\" aria-label=\"explicit with bind on the attribute permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Explicit, with <code>.bind()</code> on the attribute</h3>\n<p>The older method was commonly to use <code>.bind()</code> to explicitly bind the value of this at the point of attaching the handler. That might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"es6-class-binding\" style=\"position:relative;\"><a href=\"#es6-class-binding\" aria-label=\"es6 class binding permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>ES6 Class binding</h3>\n<p>If you are using the new ES6 class syntax, you have all the other options, plus a few more. Let's say this is our base code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> updatedCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tcounter<span class=\"token operator\">:</span> updatedCount\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Counter + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One option is to use <code>.bind()</code>, in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ADDED:</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another option is to turn the <code>handleClick</code> method, into a <em>member</em>, that is the value of an arrow function, thus automatically binding <code>this</code> to the class:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Rest of class definition</span>\n<span class=\"token comment\">// Or: public handleClick = (evt) => {}</span>\n<span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> updatedCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tcounter<span class=\"token operator\">:</span> updatedCount\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<blockquote>\n<p>Technically, this is actually an ES6 <em>public field</em>, which is, as of 2019, in an experimental stage, so while it is well supported with transpiled JS/TS, it has limited native browser support.</p>\n</blockquote>\n<h3 id=\"inline-arrow-functions\" style=\"position:relative;\"><a href=\"#inline-arrow-functions\" aria-label=\"inline arrow functions permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Inline arrow functions</h3>\n<p>One of the benefits (or drawbacks) of arrow functions is that they lexically bind <code>this</code> - <strong>automatically</strong>. So, if you do:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>It doesn't matter if <code>CustomComponent</code> has a different <code>this</code> scope, because the arrow function binds the callback where you defined it!</p>\n<h3 id=\"use-createreactclass\" style=\"position:relative;\"><a href=\"#use-createreactclass\" aria-label=\"use createreactclass permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Use <code>createReactClass</code></h3>\n<p>If you use <code>createReactClass</code>, you generally don't have to worry about this issue, as <a href=\"https://reactjs.org/docs/react-without-es6.html#autobinding\" target=\"_blank\" rel=\"nofollow noopener\">createReactClass uses autobinding</a>, which basically does <code>.bind()</code> for you.</p>\n<h3 id=\"more-reading\" style=\"position:relative;\"><a href=\"#more-reading\" aria-label=\"more reading permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>More reading</h3>\n<ul>\n<li><a href=\"http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html\" target=\"_blank\" rel=\"nofollow noopener\">http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html</a></li>\n<li><a href=\"https://www.sitepoint.com/bind-javascripts-this-keyword-react/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.sitepoint.com/bind-javascripts-this-keyword-react/</a></li>\n</ul>\n<hr>\n<h2 id=\"computed-properties\" style=\"position:relative;\"><a href=\"#computed-properties\" aria-label=\"computed properties permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Computed properties</h2>\n<p>Unlike Vue, which has a specific syntax for computed properties, React doesn't really care how you try to formulate values based on computed state properties.</p>\n<h3 id=\"es6-class---getter\" style=\"position:relative;\"><a href=\"#es6-class---getter\" aria-label=\"es6 class   getter permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>ES6 Class - Getter</h3>\n<p>With the new ES6 class based approach, a very clean solution is to use <em>getters</em>, with something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ... class stuff</span>\n\t<span class=\"token keyword\">get</span> <span class=\"token function\">isAdult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"within-the-render-function-itself\" style=\"position:relative;\"><a href=\"#within-the-render-function-itself\" aria-label=\"within the render function itself permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Within the render function itself</h3>\n<p>There is nothing preventing you from computing a value within the <code>render</code> function itself. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ... class stuff</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> isAdult <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t\t\t\tIs adult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>isAdult<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"as-a-function\" style=\"position:relative;\"><a href=\"#as-a-function\" aria-label=\"as a function permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>As a function</h3>\n<p>Another vanilla solution here is to simply use a function to return the computed value, rather than anything else. How you declare this is up to you:</p>\n<ul>\n<li>Explicitly, with <code>function myFunction(){}</code></li>\n<li>\n<p>As a ES6 class member</p>\n<ul>\n<li><code>public isAdult() {}</code></li>\n</ul>\n</li>\n<li>\n<p>With an arrow function to bind <code>this</code></p>\n<ul>\n<li><code>const isAdult = () => {};</code></li>\n</ul>\n</li>\n<li>Etc.</li>\n</ul>\n<p>To use within your <code>render</code> method, simply make sure you actually execute it by following it with the parenthesis and arguments if applicable.</p>\n<h3 id=\"state-management-system\" style=\"position:relative;\"><a href=\"#state-management-system\" aria-label=\"state management system permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>State management system</h3>\n<p>If you are using a dedicated state management system, there is a chance that what you are using might already have something in place to not only provide explicit computed properties, but also optimize them, to prevent redundant expensive re-calculations.</p>\n<p>For example, if you use MobX, make sure to check out <a href=\"https://mobx.js.org/refguide/computed-decorator.html\" target=\"_blank\" rel=\"nofollow noopener\">this page</a> on <em>computed values</em>.</p>\n<h3 id=\"further-reading\" style=\"position:relative;\"><a href=\"#further-reading\" aria-label=\"further reading permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Further reading:</h3>\n<ul>\n<li><a href=\"https://daveceddia.com/computed-properties-in-react/\" target=\"_blank\" rel=\"nofollow noopener\">https://daveceddia.com/computed-properties-in-react/</a></li>\n</ul>\n<hr>\n<h2 id=\"handlebars--mustache-type-logic-loops-conditional-etc\" style=\"position:relative;\"><a href=\"#handlebars--mustache-type-logic-loops-conditional-etc\" aria-label=\"handlebars  mustache type logic loops conditional etc permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Handlebars / Mustache type logic (loops, conditional, etc)</h2>\n<h3 id=\"conditional-rendering\" style=\"position:relative;\"><a href=\"#conditional-rendering\" aria-label=\"conditional rendering permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Conditional rendering</h3>\n<p>Tons of options - see <a href=\"https://scotch.io/tutorials/7-ways-to-implement-conditional-rendering-in-react-applications\" target=\"_blank\" rel=\"nofollow noopener\">\"7 ways to implement conditional rendering\"</a>.</p>\n<p>Some tricky ones to remember, but can be very helpful are:</p>\n<ul>\n<li>\n<p>AND (<code>&#x26;&#x26;</code>) operator to show or hide</p>\n<ul>\n<li>You can use <code>{shouldShowBool &#x26;&#x26; &#x3C;div>I'll only show up if shouldShowBool is true!&#x3C;/div>}</code></li>\n<li>This works because in JS, <code>A &#x26;&#x26; B</code> returns B if A is true, <strong><em>without</em></strong> coercing B to a boolean</li>\n</ul>\n</li>\n<li>\n<p>Ternary Operator (<code>_?_:_</code>) to swap between things</p>\n<ul>\n<li>You can use <code>{isLeaving ? &#x3C;p>Goodbye!&#x3C;/p> : &#x3C;p>Hello!&#x3C;/p>}</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"loop--array-render\" style=\"position:relative;\"><a href=\"#loop--array-render\" aria-label=\"loop  array render permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Loop / array render</h3>\n<p>The main way to render an array of something in React is to simply pass an array of JSX, within a <em>JavaScript Expression</em> block (e.g. <code>{myJsxArr}</code>). However, there are many ways to write this code:</p>\n<p>You could:</p>\n<ul>\n<li>Create an array of JSX template code assigned to a variable, and use it within <code>render()</code>, with something like: <code>items.push(&#x3C;div key={UNIQUE_KEY}>{CONTENT}&#x3C;/div>);</code></li>\n<li>\n<p>Iterate over the items directly in <code>render()</code>, and return the template there:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cookies'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Use an IIFE to construct and return the array, all inline within the JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">One through Ten:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> jsxArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tjsxArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Number </span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> jsxArr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>This is kind of an anti-pattern, so I would avoid and instead construct the array further up in the component before starting to return JSX / HTML.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react-hooks\" style=\"position:relative;\"><a href=\"#react-hooks\" aria-label=\"react hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React Hooks</h2>\n<p>See <a href=\"/cheatsheets/react/react-hooks/\">my separate cheat sheet</a>.</p>\n<h2 id=\"react---typescript-and-tsx\" style=\"position:relative;\"><a href=\"#react---typescript-and-tsx\" aria-label=\"react   typescript and tsx permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - TypeScript and TSX</h2>\n<blockquote>\n<p>👉I also have <a href=\"/cheatsheets/typescript/\">a general cheat sheet on TypeScript</a> you might find helpful!</p>\n</blockquote>\n<h3 id=\"react---typescript-and-tsx---resources\" style=\"position:relative;\"><a href=\"#react---typescript-and-tsx---resources\" aria-label=\"react   typescript and tsx   resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - TypeScript and TSX - Resources</h3>\n<ul>\n<li><a href=\"/cheatsheets/typescript/\">My General TS Cheat Sheet</a></li>\n<li><a href=\"https://github.com/typescript-cheatsheets/react\" target=\"_blank\" rel=\"nofollow noopener\">typescript-cheatsheets/react</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\" target=\"_blank\" rel=\"nofollow noopener\">TypeScript Handbook - JSX</a></li>\n<li>@ddprrt: <a href=\"https://fettblog.eu/typescript-react/components/\" target=\"_blank\" rel=\"nofollow noopener\">TypeScript and React: Components</a></li>\n</ul>\n<h3 id=\"react---common-ts-issues\" style=\"position:relative;\"><a href=\"#react---common-ts-issues\" aria-label=\"react   common ts issues permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - Common TS Issues</h3>\n<ul>\n<li>\n<p>Error using component: <code>'__' cannot be used as a JSX component. Its return type '___' is not a valid JSX element.</code> + <code>ts(2786)</code></p>\n<ul>\n<li>Read the full error message to be sure, but this could be because you indeed have something unsafe or incorrectly typed</li>\n<li>\n<p>In some cases, this can be caused by type definition files <a href=\"https://stackoverflow.com/a/53859712/11447682\" target=\"_blank\" rel=\"nofollow noopener\">getting \"out of sync\"</a>. Especially if the specific error is that the return type might be <code>null</code>, but you know it shouldn't be</p>\n<ul>\n<li>Try completely deleting <code>node_modules</code>, all lock files, and then re-installing</li>\n</ul>\n</li>\n<li>Does adding <code>@types/react</code> as a devDependency fix it?</li>\n<li>Are you using <code>Preact</code>? You might want to take a look at <a href=\"https://github.com/scurker/preact-and-typescript\" target=\"_blank\" rel=\"nofollow noopener\">scurker/preact-and-typescript guide</a>, or see if <a href=\"https://joshuatz.com/posts/2020/fixing-jsx-types-between-preact-and-react-libraries/\" target=\"_blank\" rel=\"nofollow noopener\">this specific issue (around preact/compat) applies</a>.</li>\n</ul>\n</li>\n<li>\n<p><code>Cannot find name '___'</code></p>\n<ul>\n<li>Did you accidentally name your file with <code>.ts</code> instead of <code>.tsx</code>?</li>\n<li>Make sure you have configured the <code>jsx</code> and <code>jsxFactory</code> in <code>compilerOptions</code> in the TSConfig</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"react---common-ts-syntax-stuff\" style=\"position:relative;\"><a href=\"#react---common-ts-syntax-stuff\" aria-label=\"react   common ts syntax stuff permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - Common TS Syntax Stuff</h3>\n<ul>\n<li>Declaring prop types</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// All of the below are acceptable</span>\n\n<span class=\"token comment\">// We can define the shape of props separately</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BirthdayProps</span> <span class=\"token punctuation\">{</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> BirthdayProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// ...or, we can inline it</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// And we can also use destructuring for easier nested prop access:</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> age<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>Reusing Prop Types / Extracting Prop Types</p>\n<ul>\n<li>\n<p>You can use <code>ComponentProps&#x3C;typeof MyComponent></code> (or <code>ComponentPropsWithoutRef</code>)</p>\n<ul>\n<li>For standard elements, you can use with string constant <code>ComponentProps&#x3C;'div'></code></li>\n</ul>\n</li>\n<li>Optimally, if using a library that separately exports Prop types, import &#x26; use that directly (e.g. <code>import {BoxProps} from '@chakra-ui/core'</code>)</li>\n<li>Another alternative is <code>JSX.IntrinsicElements[\"div\"]</code>, but this is not recommended.</li>\n<li>See <a href=\"https://stackoverflow.com/a/59137835/11447682\" target=\"_blank\" rel=\"nofollow noopener\">this S/O answer</a></li>\n<li>TS React Cheatsheet: <a href=\"https://github.com/typescript-cheatsheets/react/blob/main/docs/advanced/patterns_by_usecase.md#wrappingmirroring-a-html-element\" target=\"_blank\" rel=\"nofollow noopener\">\"Wrapping/Mirroring a HTML element</a></li>\n</ul>\n</li>\n<li>\n<p>Taking generic props / extending another component props</p>\n<ul>\n<li>It kind of depends on how specific you want to be, and what exact ecosystem you are using (<code>react</code>, <code>preact</code>, etc.)</li>\n<li>\n<p>It is usually best to combine your custom props with either:</p>\n<ul>\n<li>\n<p>A props interface exported from your framework (e.g. <code>BoxProps</code> from Chakra UI)</p>\n<ul>\n<li>Or...</li>\n</ul>\n</li>\n<li>\n<p><code>React.ComponentProps&#x3C;T></code> utility</p>\n<ul>\n<li>See reusing prop types section above for details</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Example: Custom component that allows parent to pass all standard <code>&#x3C;div></code> props 👇</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props <span class=\"token operator\">&amp;</span> ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token string\">'div'</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myComponent'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Accepting components through props / passing children</p>\n<ul>\n<li>The type signature of children is kind of tricky in React. In general, practically anything can be a child, so the type is pretty wide.</li>\n<li>\n<p>In standard React:</p>\n<ul>\n<li>the type for props that accept children looks like this: <code>P &#x26; { children?: ReactNode };</code> (<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L825\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>\n<p>And <code>ReactNode</code> can practically be anything:</p>\n<ul>\n<li><code>type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;</code> (<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L239\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>This gets expanded even further...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>In <code>preact</code>:</p>\n<ul>\n<li>Type for props with children looks like: <code>P &#x26; { children: ComponentChildren }</code> (<a href=\"https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L15\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>Just like in React, this gets expanded until it represents practically anything (<a href=\"https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L46-L54\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Typing DOM events and change handlers</p>\n<ul>\n<li>There are multiple ways to do this</li>\n<li>\n<p>If you are trying to type the <code>evt</code> for an event handler, you can...</p>\n<ul>\n<li>\n<p>Use a type that accepts a generic slot for the event-generating element:</p>\n<ul>\n<li><code>evt: MouseEvent&#x3C;{ElementType}></code></li>\n<li><code>evt: TargetedEvent&#x3C;{ElementType}, Event></code></li>\n<li><code>evt: TargetedEvent&#x3C;{ElementType}, {EventSubType}></code></li>\n<li>Example: <code>TargetedEvent&#x3C;HTMLButtonElement, MouseEvent></code></li>\n</ul>\n</li>\n<li>\n<p>Merge a generic event type with an explicit type for <code>evt.target</code>:</p>\n<ul>\n<li><code>evt: MouseEvent&#x3C;HTMLButtonElement> &#x26; {target: HTMLButtonElement}</code></li>\n<li><code>evt: h.JSX.TargetedEvent&#x3C;HTMLSelectElement, Event> &#x26; {target: HTMLSelectElement}</code></li>\n<li><code>evt: InputEvent &#x26; {target: HTMLSelectElement</code></li>\n</ul>\n</li>\n<li>\n<p>Use the direct type, if you have it:</p>\n<ul>\n<li><code>onClick={(evt: MouseEvent) => {}}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If you are trying to type the element of <code>evt.target</code>, you can just type assert for that section:</p>\n<ul>\n<li><code>evt.target as HTMLInputElement</code></li>\n</ul>\n</li>\n<li>Some of this also depends on React vs Preact, framework libs, etc.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"material-ui-notes\" style=\"position:relative;\"><a href=\"#material-ui-notes\" aria-label=\"material ui notes permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Material-UI Notes</h2>\n<h3 id=\"material-ui-media-queries\" style=\"position:relative;\"><a href=\"#material-ui-media-queries\" aria-label=\"material ui media queries permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Material-UI: Media Queries</h3>\n<p>In general, the <a href=\"https://material-ui.com/customization/breakpoints/\" target=\"_blank\" rel=\"nofollow noopener\">docs on breakpoints</a> are a good place to start. Here are a few options:</p>\n<ul>\n<li>\n<p>You can use them directly in <code>makeStyles</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> useStyles <span class=\"token operator\">=</span> <span class=\"token function\">makeStyles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theme</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tmyStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'@media (min-width: 1000px)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'400px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">// Or, with theme settings</span>\n\t\t<span class=\"token comment\">// https://material-ui.com/customization/breakpoints/#css-media-queries</span>\n\t\t<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'200px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>You can use the provided <a href=\"https://material-ui.com/customization/breakpoints/#usemediaquery-hook\" target=\"_blank\" rel=\"nofollow noopener\"><code>useMediaQuery</code> hooks</a></li>\n</ul>",
      "parentMeta": {
        "id": "fa1a74af-88ba-5960-ace3-8e93ee937709",
        "name": "react",
        "absolutePath": "/opt/build/repo/md/cheatsheets/react",
        "relativePath": "md/cheatsheets/react",
        "children": {
          "dirs": [],
          "md": [
            {
              "id": "6e93a4fb-f221-5d30-9aab-ed77c53b7bb7",
              "fileAbsolutePath": "/opt/build/repo/md/cheatsheets/react/chakra-ui.md",
              "html": "<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Resources</h2>\n<table>\n<thead>\n<tr>\n<th>What &#x26; Link</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://chakra-ui.com/getting-started\" target=\"_blank\" rel=\"nofollow noopener\">Chakra-UI: Getting Started</a></td>\n<td>Official Docs</td>\n</tr>\n<tr>\n<td>Raptis: <a href=\"https://dev.to/d__raptis/build-a-landing-page-with-chakra-ui-part-1-56gd\" target=\"_blank\" rel=\"nofollow noopener\">Build a Landing Page with Chakra UI</a></td>\n<td>Guide</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"responsive-design\" style=\"position:relative;\"><a href=\"#responsive-design\" aria-label=\"responsive design permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Responsive Design</h2>\n<p>Rather than ship a CSS file with a ton of classes, for the most part Chakra encourages you to use the native <code>grid</code> and <code>flex</code>, alongside media queries, to build responsive layouts.</p>\n<p>However, they do offer tools to help with this, such as component versions that provide <em>shorthand</em> props:</p>\n<ul>\n<li><code>&#x3C;Grid></code> (<a href=\"https://chakra-ui.com/grid\" target=\"_blank\" rel=\"nofollow noopener\">docs</a>)</li>\n<li><code>&#x3C;Flex></code> (<a href=\"https://chakra-ui.com/flex\" target=\"_blank\" rel=\"nofollow noopener\">docs</a>)</li>\n</ul>\n<p>They also have special syntax for generating media query CSS (see below).</p>\n<h3 id=\"responsive-breakpoints-and-queries\" style=\"position:relative;\"><a href=\"#responsive-breakpoints-and-queries\" aria-label=\"responsive breakpoints and queries permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Responsive Breakpoints and Queries</h3>\n<blockquote>\n<p>📘 Main doc: <a href=\"https://chakra-ui.com/responsive-styles\" target=\"_blank\" rel=\"nofollow noopener\">\"Responsive Styles\"</a></p>\n</blockquote>\n<p>The TLDR of Chakra's breakpoint system is that multiple props (on Chakra's components, such as <code>Box</code>), will accept an array of values, where each entry corresponds to a different breakpoint.</p>\n<p>For example, if you wanted 1 column (100% width) on the smallest screens, then 2 column, then 3 column and then 4, you could do:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'33%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25%'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Something */</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The breakpoints can be <a href=\"https://chakra-ui.com/theme#breakpoints\" target=\"_blank\" rel=\"nofollow noopener\">defined by your theme</a>, or if not provided, the defaults (defined <a href=\"https://github.com/chakra-ui/chakra-ui/blob/develop/packages/theme/src/foundations/breakpoints.ts\" target=\"_blank\" rel=\"nofollow noopener\">here</a>):</p>\n<table>\n<thead>\n<tr>\n<th>Alias</th>\n<th>Index</th>\n<th>Size</th>\n<th>PX (with 16px base)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sm</code></td>\n<td>0</td>\n<td><code>30em</code></td>\n<td><code>480px</code></td>\n</tr>\n<tr>\n<td><code>md</code></td>\n<td>1</td>\n<td><code>48em</code></td>\n<td><code>768px</code></td>\n</tr>\n<tr>\n<td><code>lg</code></td>\n<td>2</td>\n<td><code>62em</code></td>\n<td><code>992px</code></td>\n</tr>\n<tr>\n<td><code>xl</code></td>\n<td>3</td>\n<td><code>80em</code></td>\n<td><code>1280px</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Breakpoints and generated CSS are another good reason to use <code>&#x3C;Box></code> over <code>&#x3C;div></code> if you plan on using Chakra's full feature set.</p>\n</blockquote>\n<h4 id=\"conditionally-rendering-content-based-on-breakpoints\" style=\"position:relative;\"><a href=\"#conditionally-rendering-content-based-on-breakpoints\" aria-label=\"conditionally rendering content based on breakpoints permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Conditionally Rendering Content Based on Breakpoints</h4>\n<p>If you want to actually have different content based on breakpoints (as opposed to just hiding it, with the <code>display={{ sm: 'none', md: 'block' }}</code> trick), you'll need to use some sort of hook that runs on browser resizing. There are tons of these out there, and luckily there is a Chakra-specific collection of React hooks (<a href=\"https://www.npmjs.com/package/@chakra-ui/hooks\" target=\"_blank\" rel=\"nofollow noopener\">@chakra-ui/hooks</a>) that <a href=\"https://github.com/chakra-ui/chakra-ui/blob/b01f2d87c60303395e218f03a2f8bc3619f68204/website/pages/docs/hooks/use-media-query.mdx\" target=\"_blank\" rel=\"nofollow noopener\">specifically includes a <code>useMediaQuery</code> hook</a>.</p>\n<h2 id=\"using-themes\" style=\"position:relative;\"><a href=\"#using-themes\" aria-label=\"using themes permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Using Themes</h2>\n<p>Main doc 👉 <a href=\"https://chakra-ui.com/theme\" target=\"_blank\" rel=\"nofollow noopener\">Docs: Theme</a></p>\n<h3 id=\"using-theme-colors\" style=\"position:relative;\"><a href=\"#using-theme-colors\" aria-label=\"using theme colors permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Using Theme Colors</h3>\n<ol>\n<li>Make sure you are using a <code>&#x3C;ThemeProvider></code> wrapper</li>\n<li>Refer to color using <code>color</code> prop, and <code>{colorName}.{hueNumber}</code>.</li>\n</ol>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue.200<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3 id=\"using-theme-properties-outside-of-chakra\" style=\"position:relative;\"><a href=\"#using-theme-properties-outside-of-chakra\" aria-label=\"using theme properties outside of chakra permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Using Theme properties outside of Chakra</h3>\n<p>If you want to use theme colors (or any theme properties) outside of Chakra's special props and / or in actual variables, you'll want to use <a href=\"https://chakra-ui.com/usetheme\" target=\"_blank\" rel=\"nofollow noopener\">the special <code>useTheme()</code> React hook</a>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getBlueBox</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">.</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token comment\">// Or,</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also <code>export</code> your custom theme object and pass it around where needed. In fact, that might provide better type-safety, as <code>useTheme</code> does not currently support TypeScript generics.</p>\n<h2 id=\"how-to-do-x\" style=\"position:relative;\"><a href=\"#how-to-do-x\" aria-label=\"how to do x permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>How to Do X</h2>\n<ul>\n<li>\n<p>Use pseudo styles (e.g. <code>:hover</code>)?</p>\n<ul>\n<li>Use <a href=\"https://chakra-ui.com/pseudobox\" target=\"_blank\" rel=\"nofollow noopener\">the <code>&#x3C;PseudoBox></code> component</a> and pass style to special props</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Troubleshooting</h2>\n<ul>\n<li>\n<p>Why are my classes being stripped?!</p>\n<ul>\n<li>Make sure you are using <code>className=</code>, not <code>class=</code> </li>\n</ul>\n</li>\n</ul>",
              "fields": {
                "title": "Notes for myself on Chakra UI",
                "slug": "/cheatsheets/react/chakra-ui/",
                "modifiedStampMs": 1602021661000,
                "createdStampMs": 1599491478000
              },
              "parent": {
                "absolutePath": "/opt/build/repo/md/cheatsheets/react/chakra-ui.md",
                "relativePath": "cheatsheets/react/chakra-ui.md",
                "base": "chakra-ui.md",
                "name": "chakra-ui"
              }
            },
            {
              "id": "29730883-75cc-5e46-b337-b4869a75c3cf",
              "fileAbsolutePath": "/opt/build/repo/md/cheatsheets/react/react-performance-optimization.md",
              "html": "<h2 id=\"optimizing-react-renders-and-avoiding-unnecessary-re-renders\" style=\"position:relative;\"><a href=\"#optimizing-react-renders-and-avoiding-unnecessary-re-renders\" aria-label=\"optimizing react renders and avoiding unnecessary re renders permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Optimizing React Renders and Avoiding Unnecessary Re-Renders</h2>\n<p>One of the most annoying parts of React (IMHO), and often (oddly) left out of performance discussions around React...</p>\n<h3 id=\"what-causes-a-react-component-to-re-render\" style=\"position:relative;\"><a href=\"#what-causes-a-react-component-to-re-render\" aria-label=\"what causes a react component to re render permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>What Causes a React Component To Re-Render</h3>\n<p>First, we should clarify what causes a React component to re-render, and the answer is pretty much... anything. Well, not exactly, but close:</p>\n<ul>\n<li>\n<p>An update to the <em>state</em> of that component. This includes changes to: </p>\n<ul>\n<li><code>props</code> (regardless of actual usage)</li>\n<li>values derived from <code>props</code></li>\n<li>The actual explicit state values (e.g. via <code>setState</code>)</li>\n</ul>\n</li>\n<li>\n<p>And / or, <strong><em>ANY</em></strong> of the component's parents re-rendering</p>\n<ul>\n<li>This is a very common annoyance - if your component re-renders, it blindly re-renders all of its children as well!</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>💡 / ⚠ - An easy-to-miss missed thing about prop comparison: Passing an anonymous function (aka inline function / callback) as a prop will break prop-comparison in things like <code>React.memo</code> and <code>PureComponent</code>; if the parent changes, even if the anonymous function stays the same, React will always infer that the props have changed, since it has no way to compare the old anonymous function to the new one. This has been written about in many places, including <a href=\"https://dmitripavlutin.com/use-react-memo-wisely/#4-reactmemo-and-callback-functions\" target=\"_blank\" rel=\"nofollow noopener\">here</a>, <a href=\"https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578\" target=\"_blank\" rel=\"nofollow noopener\">here</a>, and <a href=\"https://medium.com/@Osterberg/react-component-renders-too-often-2917daabcf5\" target=\"_blank\" rel=\"nofollow noopener\">here</a>. The <a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\" rel=\"nofollow noopener\"><code>useCallback</code> hook</a> is a good way to address this, but comes with its own caveats (<a href=\"https://dmitripavlutin.com/dont-overuse-react-usecallback/\" target=\"_blank\" rel=\"nofollow noopener\">ref A</a>, <a href=\"https://kentcdodds.com/blog/usememo-and-usecallback\" target=\"_blank\" rel=\"nofollow noopener\">ref B</a>)</p>\n</blockquote>\n<blockquote>\n<p>⚠ There is a lot of misleading information out there about the <em>Virtual DOM</em> (aka <em>VDOM</em>) and its benefits. People tend to incorrectly believe that React's dom-diffing means that re-renders are avoided if nothing has changed, but this is only partially true; yes, React will reduce the number of <strong><em>real DOM</em></strong> updates if nothing has changed, <strong><em>but</em></strong> React treats <strong><em>VDOM re-renders</em></strong> as <em>inexpensive</em>, and is part of why it lets almost anything trigger a VDOM re-render, which eventually has to be diffed against the real DOM as well. For the most part, this can stay fast because of how VDOM works, but this can also be a big problem if you have a lot of (processor heavy) logic tied to the rendering of your components. <br/><br/>This post from Rich Harris, <a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\" target=\"_blank\" rel=\"nofollow noopener\">\"Virtual DOM is pure overhead\"</a>, is a great related read.</p>\n</blockquote>\n<h3 id=\"tracing-a-re-render\" style=\"position:relative;\"><a href=\"#tracing-a-re-render\" aria-label=\"tracing a re render permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Tracing a Re-Render</h3>\n<p>Even knowing all the above, about what causes a React re-render, it might still be hard to pin down what <em>exactly</em> is causing a specific component (or component tree) to re-render. Thankfully, there are tools you can use to help track down what is triggering a re-render:</p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/tree/master/packages/react-devtools\" target=\"_blank\" rel=\"nofollow noopener\">React Dev Tools</a> - The <a href=\"https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html\" target=\"_blank\" rel=\"nofollow noopener\"><em>React Profiler</em></a></li>\n<li>The React <a href=\"https://reactjs.org/docs/profiler.html\" target=\"_blank\" rel=\"nofollow noopener\">Profiler API</a></li>\n<li>Browser stack traces / <a href=\"https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab\" target=\"_blank\" rel=\"nofollow noopener\">Performance monitoring</a></li>\n<li>\n<p>Adding console output. E.g.:</p>\n<ul>\n<li><code>console.trace()</code></li>\n<li>Hooking into the callbacks / comparison methods of <a href=\"https://reactjs.org/docs/react-api.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener\"><code>React.memo</code></a> or <a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\" target=\"_blank\" rel=\"nofollow noopener\"><code>shouldComponentUpdate()</code></a></li>\n<li>Adding a <code>useEffect()</code> hook to listen for changes on specific props / state values and specifically log them</li>\n</ul>\n</li>\n</ul>\n<p>This post does a great job of covering some of the best approaches for debugging excessive rerenders in React - <a href=\"https://brycedooley.com/debug-react-rerenders/\" target=\"_blank\" rel=\"nofollow noopener\">brycedooley.com/debug-react-rerenders</a>.</p>\n<h3 id=\"avoiding-re-renders\" style=\"position:relative;\"><a href=\"#avoiding-re-renders\" aria-label=\"avoiding re renders permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Avoiding Re-Renders</h3>\n<p>The first step to avoiding a re-render might be to simply understand <em>why</em> it is happening. See the above section(s) for the general reasons why a React component gets re-rendered, and how to trace the specific changes triggering yours. Regardless of the reason, there are a few <em>general</em> approaches for reducing unnecessary components and optimizing performance.</p>\n<ul>\n<li>\n<p>For Class-Based Components</p>\n<ul>\n<li>\n<p>Hook into <a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\" target=\"_blank\" rel=\"nofollow noopener\">the <code>shouldComponentUpdate</code> lifecycle method</a></p>\n<ul>\n<li>You basically override it based on <em>your</em> set of criteria for why your component should or should not update on changed props</li>\n<li><a href=\"https://reactjs.org/docs/optimizing-performance.html#examples\" target=\"_blank\" rel=\"nofollow noopener\">Here</a> are some examples from the React docs on using this to optimize performance</li>\n<li>Make sure to heed the warnings <a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\" target=\"_blank\" rel=\"nofollow noopener\">listed in the docs</a></li>\n</ul>\n</li>\n<li>\n<p>Inherit your component from <a href=\"https://reactjs.org/docs/react-api.html#reactpurecomponent\" target=\"_blank\" rel=\"nofollow noopener\"><code>React.PureComponent</code> class</a> (by extending the class / subclassing it)</p>\n<ul>\n<li>This basically has a predefined <code>shouldComponentUpdate</code> that shallow compares old props and state to new props and state, and prevents an update if they are the same</li>\n<li>The <a href=\"https://reactjs.org/docs/optimizing-performance.html#examples\" target=\"_blank\" rel=\"nofollow noopener\">examples on the React performance page</a> also discusses the difference between using <code>PureComponent</code> versus hand-coding <code>shouldComponentUpdate</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>For Function-Based Components (e.g. a React Hooks approach)</p>\n<ul>\n<li>\n<p>Memoization is the main tool you have available when it comes to preventing re-renders with hooks</p>\n<ul>\n<li>\n<p>For entire components: <a href=\"https://reactjs.org/docs/react-api.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener\"><code>React.memo(MyComponent)</code> HOC</a></p>\n<ul>\n<li>Warning: This <em>only</em> checks for unchanging props; any calls to <code>useState</code> or <code>useContext</code> inside the component will still trigger a re-render.</li>\n<li>This also <a href=\"https://gist.github.com/slikts/e224b924612d53c1b61f359cfb962c06\" target=\"_blank\" rel=\"nofollow noopener\">has issues with {children} passed via props</a></li>\n<li>You can pass a custom prop comparison method as the second argument</li>\n</ul>\n</li>\n<li>For any value: <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener\">The <code>useMemo()</code> hook</a></li>\n</ul>\n</li>\n<li><a href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback\" target=\"_blank\" rel=\"nofollow noopener\">Here</a> is a guide on optimizing with hooks.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>📘 <a href=\"https://nickymeuleman.netlify.app/blog/react-memo\" target=\"_blank\" rel=\"nofollow noopener\">This post</a> is a good alternative summary of the above options.</p>\n</blockquote>\n<blockquote>\n<p>There is some truth to the \"avoid premature-optimization\" argument. In general, React re-rendering in the VDOM is very fast, and you don't need to optimize it. Adding methods that check props and state and do deep comparisons to reduce re-renders actually <em>adds</em> overhead. For example, it would be a bad situation if over a span of time, you reduced renders from 300 to 290, but because you did so with a deep prop equality check, you <em>added 300 NEW</em> comparison calls. <a href=\"https://dmitripavlutin.com/use-react-memo-wisely/#2-when-to-use-reactmemo\" target=\"_blank\" rel=\"nofollow noopener\">This infographic on when to use `React.memo()</a> is a good breakdown of reasons to go down this route.</p>\n</blockquote>",
              "fields": {
                "title": "React Performance and Optimization Notes",
                "slug": "/cheatsheets/react/react-performance-optimization/",
                "modifiedStampMs": 1603262054000,
                "createdStampMs": 1603196476000
              },
              "parent": {
                "absolutePath": "/opt/build/repo/md/cheatsheets/react/react-performance-optimization.md",
                "relativePath": "cheatsheets/react/react-performance-optimization.md",
                "base": "react-performance-optimization.md",
                "name": "react-performance-optimization"
              }
            },
            {
              "id": "fb25ed53-1056-5751-88af-9a9cfa701740",
              "fileAbsolutePath": "/opt/build/repo/md/cheatsheets/react/react-hooks.md",
              "html": "<h2 id=\"what-are-react-hooks\" style=\"position:relative;\"><a href=\"#what-are-react-hooks\" aria-label=\"what are react hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>What are React Hooks?</h2>\n<p>React hooks partially came about because of, and an alternative to, the complexity and boilerplate involved with class based components (as opposed to functions) and/or HOCs (higher order components). They are not required to be used, but many new devs prefer them for readability and isolation.</p>\n<p>At their core, the key value proposition of React hooks is that <strong>they allow you to hook more directly into the React lifecycle and core APIs, such as state, props, etc.</strong></p>\n<h2 id=\"built-in-react-hooks\" style=\"position:relative;\"><a href=\"#built-in-react-hooks\" aria-label=\"built in react hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Built-In React Hooks</h2>\n<table>\n<thead>\n<tr>\n<th>Hook</th>\n<th>What</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener\">useState</a></td>\n<td>Get and set state</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener\">useEffect</a></td>\n<td>Wrap a function that contains possibly <em>effectful</em> code, which will be called after render.<br><br>You can conditionally trigger it by passing a dependency array as the second argument.<br><br>You can use it as a cleanup method (before component unmounts), by <code>returning</code> a cleanup function.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener\">useContext</a></td>\n<td>Returns the current value for a given context object (object from <code>React.createContext</code>). Value is from nearest <code>Provider</code>.<br><br>A context value change will <em>always</em> trigger a re-render.<br><br>Using this with a context provider is a common alternative to prop-drilling, and/or large global state management systems.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"nofollow noopener\">useReducer</a></td>\n<td>An alternative to <code>useState</code> that basically takes a function to mutate state, rather than the state update directly.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\" rel=\"nofollow noopener\">useCallback</a></td>\n<td>Meant for optimization, you pass a callback and the dependencies that the callback uses to produce a result, and you get back a <em>memoized</em> (i.e. <em>cached</em>) callback function that only changes if the dependencies change.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener\">useMemo</a></td>\n<td>Close to <code>useCallback</code>, but returns a memoized value, rather than a callback, that is only recomputed if the dependencies change.<br/><br/>Good use case is for <em>computed values</em> derived from state.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\" rel=\"nofollow noopener\">useRef</a></td>\n<td>Returns a special mutable reference object, which can be updated, but persists across re-renders and does not trigger re-renders on change.<br><br>Value can be accessed with <code>.current</code>.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\" target=\"_blank\" rel=\"nofollow noopener\">useImperativeHandle</a></td>\n<td>Lets you modify the reference that is passed to parent components (for example, to add a method onto <code>ref.current</code>). If used, should be combined with <code>forwardRef</code>, but also not recommended, period.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\" rel=\"nofollow noopener\">useLayoutEffect</a></td>\n<td>Essentially the same as <code>useEffect</code>, but fires after all DOM updates have occurred (e.g. at <code>componentDidMount</code>, or <code>componentDidUpdate</code>)</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://reactjs.org/docs/hooks-reference.html#usedebugvalue\" target=\"_blank\" rel=\"nofollow noopener\">useDebugValue</a></td>\n<td>For <em>custom</em> hooks, you can use this to display a special label for the hook inside the React DevTools.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"typescript-concerns\" style=\"position:relative;\"><a href=\"#typescript-concerns\" aria-label=\"typescript concerns permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>TypeScript Concerns</h3>\n<p>Be aware that TypeScript can be particular about how you use hooks and annotate types. For example, for <code>useState</code>, you should pass the type through a generic slot if it is anything other than a primitive:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n\ttitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tcopyrightYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>books<span class=\"token punctuation\">,</span> setBooks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Book<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Types for `books` and `setBooks` can now be determined</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// This is fine, because `number` can be inferred</span></code></pre></div>\n<h2 id=\"building-your-own-hooks\" style=\"position:relative;\"><a href=\"#building-your-own-hooks\" aria-label=\"building your own hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Building Your Own Hooks</h2>\n<p>You can easily write, share, and reuse custom hooks across many different components. In fact, this is one of the main selling points of hooks:</p>\n<blockquote>\n<p>Hooks allow you to reuse stateful logic without changing your component hierarchy.</p>\n</blockquote>\n<p>To create and re-use a hook, simply define it as an exported function, and then import where you need to use it. See <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener\">the docs</a> for details.</p>\n<h3 id=\"custom-react-hook---sample-syntax\" style=\"position:relative;\"><a href=\"#custom-react-hook---sample-syntax\" aria-label=\"custom react hook   sample syntax permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Custom React Hook - Sample Syntax</h3>\n<p>Remember to prefix with <code>use</code>.</p>\n<p>Here is a general template:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useMyHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Instantiate state vars</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>myHookState<span class=\"token punctuation\">,</span> setMyHookState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Setup code to update the hook state and handle removal</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Register things (e.g. listeners, subscriptions, etc) to call setMyHookState</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Un-register things that will call setMyHookState</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Don't forget to return the state / val</span>\n\t<span class=\"token keyword\">return</span> myHookState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"custom-react-hooks---examples\" style=\"position:relative;\"><a href=\"#custom-react-hooks---examples\" aria-label=\"custom react hooks   examples permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Custom React Hooks - Examples</h3>\n<!-- Window Dimensions -->\n<details>\n\t<summary>React Hook - Window Dimensions</summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useWindowSize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Need to hold function reference so we can use it for cleanup</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateSize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> updateSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">updateSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> updateSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</details>\n<details>\n\t<summary>React Hook - Document Title</summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTitle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialTitle</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">,</span> setTitle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialTitle <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tdocument<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">,</span> setTitle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"custom-react-hooks---important-things-to-note\" style=\"position:relative;\"><a href=\"#custom-react-hooks---important-things-to-note\" aria-label=\"custom react hooks   important things to note permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Custom React Hooks - Important Things to Note</h3>\n<ul>\n<li>\n<p>React Hooks + TypeScript</p>\n<ul>\n<li>\n<p>When writing custom React hooks in TypeScript, it is important to note that the syntax for consuming React hooks (<code>const [val, setVal] = useMyHook()</code>) and exporting them (<code>return [val, setVal];</code>) can be problematic in TypeScript</p>\n<ul>\n<li>\n<p>You usually need to either \"freeze\" the array at export:</p>\n<ul>\n<li><code>return [val, setVal] as const;</code></li>\n</ul>\n</li>\n<li>Or, strictly define the return type of your hook as a defined <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#tuple\" target=\"_blank\" rel=\"nofollow noopener\"><code>tuple</code> type</a> (an Array in TS with known fixed types &#x26; length)</li>\n<li>See <a href=\"https://fettblog.eu/typescript-react-typeing-custom-hooks/\" target=\"_blank\" rel=\"nofollow noopener\">this blog post</a> for details.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"chaining-hooks\" style=\"position:relative;\"><a href=\"#chaining-hooks\" aria-label=\"chaining hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Chaining Hooks</h2>\n<p>You can \"chain\" hooks, where one hook update triggers another, by pulling them in as dependencies (second argument to <code>useEffect</code>).</p>\n<p>For example, if I've already created a <code>useWindowSize</code> hook that updates when the window is resized, I could reuse that hook as the trigger to re-calculate the size of an element on the page, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useElemSize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elementRef</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Use windowSize hook as trigger to re-evaluate</span>\n\t<span class=\"token keyword\">const</span> windowSize <span class=\"token operator\">=</span> <span class=\"token function\">useWindowSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> elem <span class=\"token operator\">=</span> elementRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">/** @type {DOMRect} */</span>\n\t\t\t<span class=\"token keyword\">const</span> domRect <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\twidth<span class=\"token operator\">:</span> domRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n\t\t\t\theight<span class=\"token operator\">:</span> domRect<span class=\"token punctuation\">.</span>height\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>windowSize<span class=\"token punctuation\">,</span> elementRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"problem-areas\" style=\"position:relative;\"><a href=\"#problem-areas\" aria-label=\"problem areas permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Problem Areas</h2>\n<h3 id=\"useeffect-dependencies\" style=\"position:relative;\"><a href=\"#useeffect-dependencies\" aria-label=\"useeffect dependencies permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>useEffect Dependencies</h3>\n<p>One major problem area with React hooks that I've encountered is the dependency array of <code>useEffect</code>. Even with things like <a href=\"https://reactjs.org/docs/hooks-rules.html#eslint-plugin\" target=\"_blank\" rel=\"nofollow noopener\"><code>eslint-plugin-react-hooks</code></a> and the bundled <code>react-hooks/exhausitve-deps</code> rule, it is a little too easy to run into confusing cases.</p>\n<h4 id=\"useeffect-dependencies---outside-callbacks\" style=\"position:relative;\"><a href=\"#useeffect-dependencies---outside-callbacks\" aria-label=\"useeffect dependencies   outside callbacks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>useEffect Dependencies - Outside Callbacks</h4>\n<p>One of the very first mistakes I made with React hooks was something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// This is bad code</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">internalHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// bunch of code</span>\n\t\t<span class=\"token comment\">// something that touches state or props and *causes re-render*:</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// register handler once</span>\n\t\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>internalHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>internalHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// Assume some jsx</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The big issue with the above is that I've accidentally created an infinite loop.</p>\n<ul>\n<li>Whenever MyComponent is called (rendered), a new <code>internalHandler</code> is defined</li>\n<li>Because <code>internalHandler</code> is a dependency for useEffect, it getting created on render is triggering it and causing the handler to get registered again</li>\n<li><code>internalHandler</code> does something to state / props and triggers a re-render, which starts the loop all over again</li>\n</ul>\n<p>The ESLint hooks rule will actually catch this, and warn with something like:</p>\n<blockquote>\n<p>⚠ The 'internalHandler' function makes the dependencies of useEffect Hook (at line ___) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'internalHandler' definition into its own useCallback() Hook</p>\n</blockquote>\n<p>That looks like a helpful error! Using either of the solutions it mentions <em>should</em> work. But... what if our case is complex, and wrapping it in <code>useCallback</code> still updates a part of state that it itself needs? Here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> internalHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// something that touches state and *causes re-render*</span>\n\t\t<span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// register handler once</span>\n\t\t<span class=\"token keyword\">const</span> timerId <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>internalHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registered handler #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timerId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>internalHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">It has been </span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> seconds!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>On the surface, this might look OK; we are using <code>useCallback</code> to avoid recreating the callback on re-renders, and there are no eslint errors about exhaustive dependencies... but... we just did it again! We created another circular infinite loop!</p>\n<ul>\n<li><code>counter</code> is a state value, so changing it will cause a re-render</li>\n<li>Since <code>counter</code> is a dependency of <code>internalHandler</code>, changing it also means that React thinks the handler is stale, and will create a new instance</li>\n<li>React creating a new instance of <code>internalHandler</code> is basically just as bad as if we had declared it without using <code>useCallback()</code>; we are back to square one, where <code>useEffect</code> runs on every render and keeps registering new (separate) handlers</li>\n</ul>\n<p>Solution? Here are some approaches:</p>\n<ul>\n<li>\n<p>Set state variables in callbacks, but don't use the same ones you are setting!</p>\n<ul>\n<li>\n<p>If the new state depends on the old one, like our counter example, an easy workaround is to use the alternative syntax for the state setter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Rewrite this:</span>\n<span class=\"token keyword\">const</span> internalHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// To this:</span>\n<span class=\"token keyword\">const</span> internalHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">counter</span> <span class=\"token operator\">=></span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ^ a state variable is no longer a dependency</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Use <code>ref</code> instead of state, where appropriate</p>\n<ul>\n<li>\n<p>Warning: a change to a ref value will not trigger a re-render by itself. So although this would fix the circular issue in our example, the DOM would continue to show <code>It has been 0 seconds</code> no matter how much time has actually passed. Here is how we could rewrite our example to use a ref:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>elapsedSec<span class=\"token punctuation\">,</span> setElapsedSec<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> internalHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// something that touches state and *causes re-render*</span>\n\t\t<span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setElapsedSec</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// register handler once</span>\n\t\t<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>internalHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registered handler </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>internalHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">It has been </span><span class=\"token punctuation\">{</span>elapsedSec<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> seconds!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>Avoid using state entirely, for something that is simply a computed property</li>\n<li>When possible, move callbacks directly inside <code>useEffect</code>, so they don't have to be dependencies and can live inside the right closure</li>\n</ul>\n<h3 id=\"usecallback-infinite-loop\" style=\"position:relative;\"><a href=\"#usecallback-infinite-loop\" aria-label=\"usecallback infinite loop permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>useCallback Infinite Loop</h3>\n<p>It is also <em>crazy</em> easy to accidentally repeat the exact same circular issue with the dependency array of <code>useCallback</code> as outlined above with `useEffect, when trying to use a variable that is scoped to the outer closure:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>elapsedSec<span class=\"token punctuation\">,</span> setElapsedSec<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// In case callback is not defined in props</span>\n\t<span class=\"token keyword\">const</span> twoSecCallback <span class=\"token operator\">=</span>\n\t\tprops<span class=\"token punctuation\">.</span>twoSecCallback <span class=\"token operator\">||</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">2 seconds are up!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> internalHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// something that touches state and *causes re-render*</span>\n\t\t<span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> elapsedSec <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elapsedSec <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">twoSecCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">setElapsedSec</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>twoSecCallback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// register handler once</span>\n\t\t<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>internalHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registered handler </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>internalHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">It has been </span><span class=\"token punctuation\">{</span>elapsedSec<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> seconds!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are no ESlint hook warnings, but the above will indeed cause issues due to what is essentially the same problem as outlined in the above section on callbacks outside useEffect:</p>\n<ul>\n<li><code>twoSecCallback</code> being declared outside the closure of <code>useCallback</code> means that every time the component re-renders, it changes</li>\n<li>Since <code>twoSecCallback</code> is a dependency of <code>internalHandler</code>, when the callback variable changes, the <code>useCallback</code> wrapper (<code>internalHandler</code>) is deemed to be stale, and React will create a new version</li>\n<li>React creating a new version of the <code>useCallback</code> closure (<code>internalHandler</code>) means that, since it is a dependency of <code>useEffect</code>, the effect function will run again</li>\n<li>The call stack on subsequent renders ends up looking like <code>render() -> useEffect runs due to (CHANGE) in internalHandler, registers new internalHandler -> twoSecCallback {CHANGE} -> internalHandler {CHANGE} -> (NEXT RENDER) -> useEffect runs due to...</code> and so on. Until you have hundreds of duplicate timers, handlers, and a crashed browser tab 🔥💥😬</li>\n</ul>\n<p>The solution here is similar to the solutions with <code>useEffect</code>. The easiest solution in this case is simply to move the callback variable declaration within the closure of <code>useCallback</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>elapsedSec<span class=\"token punctuation\">,</span> setElapsedSec<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> internalHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// In case callback is not defined in props</span>\n\t\t<span class=\"token keyword\">const</span> twoSecCallback <span class=\"token operator\">=</span>\n\t\t\tprops<span class=\"token punctuation\">.</span>twoSecCallback <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">2 seconds are up!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// something that touches state and *causes re-render*</span>\n\t\t<span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> elapsedSec <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elapsedSec <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">twoSecCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">setElapsedSec</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// register handler once</span>\n\t\t<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>internalHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registered handler </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>internalHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>It has been <span class=\"token punctuation\">{</span>elapsedSec<span class=\"token punctuation\">}</span> seconds<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>",
              "fields": {
                "title": "React Hooks - Cheat Sheet for Built-In Hooks and Custom",
                "slug": "/cheatsheets/react/react-hooks/",
                "modifiedStampMs": 1608487864000,
                "createdStampMs": 1598867349000
              },
              "parent": {
                "absolutePath": "/opt/build/repo/md/cheatsheets/react/react-hooks.md",
                "relativePath": "cheatsheets/react/react-hooks.md",
                "base": "react-hooks.md",
                "name": "react-hooks"
              }
            },
            {
              "id": "fa1a74af-88ba-5960-ace3-8e93ee937709",
              "fileAbsolutePath": "/opt/build/repo/md/cheatsheets/react/index.md",
              "html": "<h2 id=\"other-resources\" style=\"position:relative;\"><a href=\"#other-resources\" aria-label=\"other resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Other resources</h2>\n<p>My other pages:</p>\n<ul>\n<li><a href=\"./react-hooks.md\">React Hooks</a></li>\n<li><a href=\"./react-performance-optimization.md\">React Performance and Optimizations</a></li>\n</ul>\n<p>External resources:</p>\n<table>\n<thead>\n<tr>\n<th>What &#x26; Link</th>\n<th>Type</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"The React Handbook\" by Flavio Copes - <a href=\"https://www.freecodecamp.org/news/the-react-handbook-b71c27b0a795/\" target=\"_blank\" rel=\"nofollow noopener\">Online version</a> <a href=\"https://flaviocopes.com/page/react-handbook/\" target=\"_blank\" rel=\"nofollow noopener\">PDF signup</a><br>   ---> Amazing resource!</td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://sebastiandedeyne.com/react-for-vue-developers/\" target=\"_blank\" rel=\"nofollow noopener\">\"React for Vue Developers\"</a> by Sebastian De Deyne</td>\n<td>Guide / Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"nofollow noopener\">React Lifecycles Method Diagram</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\" target=\"_blank\" rel=\"nofollow noopener\">React+TypeScript Cheatsheets</a><br/>    - <a href=\"https://react-typescript-cheatsheet.netlify.app/\" target=\"_blank\" rel=\"nofollow noopener\">Live Website</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/piotrwitek/react-redux-typescript-guide\" target=\"_blank\" rel=\"nofollow noopener\">React Redux TypeScript Guide</a></td>\n<td>Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td>PluralSight: <a href=\"https://www.pluralsight.com/guides/composing-react-components-with-typescript\" target=\"_blank\" rel=\"nofollow noopener\">Composing React Components with TypeScript</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Post: <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"nofollow noopener\">\"You Probably Don't Need Derived State\"</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Collection: <a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener\">enaqx/awesome-react</a></td>\n<td>Collection</td>\n<td></td>\n</tr>\n<tr>\n<td>Kent C. Dodds - <a href=\"https://kentcdodds.com/blog/super-simple-start-to-react\" target=\"_blank\" rel=\"nofollow noopener\">\"Super Simple Start to React\"</a></td>\n<td>Guide</td>\n<td></td>\n</tr>\n<tr>\n<td>Steven Jin: <a href=\"https://medium.com/@stevenjinyi/study-sheet-for-react-interview-questions-2020-2fe25b8fa316\" target=\"_blank\" rel=\"nofollow noopener\">Cheat Sheet for React Interview, 2020</a></td>\n<td>Refresher / Cheatsheet</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/learning-zone/react-interview-questions\" target=\"_blank\" rel=\"nofollow noopener\">learning-zone/react-interview-questions</a></td>\n<td>Refresher / Cheatsheet</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"binding-template-literal\" style=\"position:relative;\"><a href=\"#binding-template-literal\" aria-label=\"binding template literal permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Binding template literal</h2>\n<p>Binding template literal to property expecting string:\nYou have to use double brackets to \"break out\" of JSX and into regular JS.\nInstead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SEO</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`${props.pageContext.slug}`<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>You need:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SEO</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>pageContext<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3 id=\"creating-unique-keys\" style=\"position:relative;\"><a href=\"#creating-unique-keys\" aria-label=\"creating unique keys permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Creating unique keys</h3>\n<p>You want a unique identifier, which is actually harder than one might expect to create. Using the <code>index</code> provided within a loop is not recommended, and even combining with something like <code>(new Date()).getTime()</code> is not guaranteed to be unique.</p>\n<p>There are tons of packages out there that you can drop in to create unique Ids. Or just make a composite key out of enough unique parameters to ensure non-duplicates.</p>\n<h2 id=\"misc--how-do-i\" style=\"position:relative;\"><a href=\"#misc--how-do-i\" aria-label=\"misc  how do i permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Misc / How Do I...</h2>\n<ul>\n<li>\n<p>You can now use empty elements, known as <em>fragments</em>, to wrap siblings:</p>\n<ul>\n<li><code>&#x3C;>&#x3C;div>&#x3C;/div>&#x3C;div>&#x3C;/div>&#x3C;/></code></li>\n</ul>\n</li>\n<li>\n<p>Issues returning JSX?</p>\n<ul>\n<li>More than one line? Make sure wrapped in parenthesis <code>return (&#x3C;div>&#x3C;/div>)</code></li>\n<li>Make sure there is *only <strong>one*</strong> root level element</li>\n</ul>\n</li>\n<li>\n<p>Pass a bunch of options to a component as props (basically convert JS Obj to props)</p>\n<ul>\n<li>Just use spread operator - <code>{...props}</code></li>\n<li>You can use this re-use the same props across multiple components!</li>\n<li>\n<p>Be careful about directly spreading vs capturing via rest parameters and then spreading - you might not want to pass <em>all</em> props to child component</p>\n<ul>\n<li>This is why you often see <code>const {myVarA, myVarB, ...restProps} = props;</code> inside components -> <code>restProps</code> would be a subset of <code>props</code> that does not contain <code>myVarA</code> or <code>myVarB</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Simulate a change event on a <code>&#x3C;input></code> element</p>\n<ul>\n<li>Use a combination of an exposed setter with a manual event dispatch</li>\n<li>See <a href=\"https://stackoverflow.com/a/46012210/11447682\" target=\"_blank\" rel=\"nofollow noopener\">https://stackoverflow.com/a/46012210/11447682</a></li>\n</ul>\n</li>\n<li>\n<p>How to add an external stylesheet (not for bundling)</p>\n<ul>\n<li>Instead of using <code>import</code> within a JS file (like <em>App.js</em>), add the stylesheet directly as a link tag element in the <strong>HTML</strong> file (e.g. <code>&#x3C;link rel=\"stylesheet\" href=\"https://.../style.css\" /></code>)</li>\n</ul>\n</li>\n<li>\n<p>How do I access an element directly (similar to native browser APIs like <code>document.getElementById</code>) in React? How do I get the DOM node?</p>\n<ul>\n<li>That is a great use case for React <code>refs</code>! - <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener\">Docs</a></li>\n<li>\n<p>Options:</p>\n<ul>\n<li>\n<p>Newest and recommended: <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\" rel=\"nofollow noopener\"><code>useRef</code> hook</a></p>\n<ul>\n<li><code>myRef = useRef(null)</code></li>\n</ul>\n</li>\n<li>Older:- <code>this.myRef = React.createRef()</code> in class constructor</li>\n</ul>\n</li>\n<li>You can access DOM node through <code>myRef.current</code>, after attaching via <code>&#x3C;MyElement ref={myRef}/></code></li>\n</ul>\n</li>\n<li>\n<p>How do I expose and call a function from a child component in a parent component (aka passing methods up through the component tree)?</p>\n<ul>\n<li>This is considered a bit of an <em>anti-pattern</em> with React, and is generally avoided entirely (things are always passed down, not up).</li>\n<li>However, there are still ways to do so - the main way is to use refs (<a href=\"https://stackoverflow.com/a/37950970/11447682\" target=\"_blank\" rel=\"nofollow noopener\">S/O</a>, <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener\">Docs</a>)</li>\n</ul>\n</li>\n<li>\n<p>What's with the <code>{}</code> curly braces? Is this Mustache or Handlebars templating?</p>\n<ul>\n<li>No, the curly braces simply tell the JSX compiler that you are about to give it something that should be evaluated as a <strong><em>JavaScript Expression</em></strong>, rather than a string or component.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tips\" style=\"position:relative;\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Tips</h2>\n<ul>\n<li>You can assign JSX to variables! Makes it very easy to reuse!</li>\n<li>\n<p>Make use of object destructuring assignments to avoid repetitive props syntax</p>\n<ul>\n<li><code>const {hidden, dataArr, isAdmin, isAuthed} = this.props</code></li>\n<li>-> Or, destructure right in function argument, <code>const myComponent = ({hidden, dataArr, isAdmin, isAuthed}) => {}</code></li>\n</ul>\n</li>\n<li>You can use class members and/or regular vars to hold changing values, as opposed to putting in state/props, if you want to avoid unnecessary renders when those values are not part of UI</li>\n</ul>\n<h2 id=\"asset-management-and-usage\" style=\"position:relative;\"><a href=\"#asset-management-and-usage\" aria-label=\"asset management and usage permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Asset management and usage</h2>\n<p>You have two main options when it comes to asset management:</p>\n<ul>\n<li>\n<p><a href=\"https://create-react-app.dev/docs/using-the-public-folder\" target=\"_blank\" rel=\"nofollow noopener\">Public Folder</a>: Place in <code>/public</code></p>\n<ul>\n<li>Pull into HTML with <code>%PUBLIC_URL%</code></li>\n<li>Pull into JS with <code>process.env.PUBLIC_URL</code></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://create-react-app.dev/docs/adding-images-fonts-and-files\" target=\"_blank\" rel=\"nofollow noopener\">Bundling</a>: Place asset files <em>alongside</em> JS, in <code>/src</code></p>\n<ul>\n<li>Pull into JS by using <code>import</code> at top of file with relatively path</li>\n<li>Pull into css (e.g. for background image) with relative path</li>\n</ul>\n</li>\n</ul>\n<p>The second option <a href=\"https://create-react-app.dev/docs/adding-images-fonts-and-files\" target=\"_blank\" rel=\"nofollow noopener\">is <em>always</em> preferred</a>, since it uses webpack to bundle assets and will help keep the size of your app down by only bundling assets that are actually used (as well as some other tricks).</p>\n<h3 id=\"importing-assets-in-js-or-css\" style=\"position:relative;\"><a href=\"#importing-assets-in-js-or-css\" aria-label=\"importing assets in js or css permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Importing assets in JS or CSS</h3>\n<p>Examples:</p>\n<p>JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> background <span class=\"token keyword\">from</span> <span class=\"token string\">'./assets/background.jpg'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CSS:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./assets/background.jpg<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"getting-around-method-binding-of-this\" style=\"position:relative;\"><a href=\"#getting-around-method-binding-of-this\" aria-label=\"getting around method binding of this permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Getting around method binding of <code>this</code></h2>\n<p>A common issue with React is preserving the value of <code>this</code>, especially when it comes to event handlers, like <code>onClick</code>.</p>\n<p>If the callback you are assigning uses <code>this</code> within its body, you will have issues if the value of <code>this</code> changes (most often in a <code>Cannot read property '___' of undefined</code> error).</p>\n<p>Here are some ways to ensure the value of <code>this</code> stays the way you want it to:</p>\n<h3 id=\"explicit-with-bind-on-the-attribute\" style=\"position:relative;\"><a href=\"#explicit-with-bind-on-the-attribute\" aria-label=\"explicit with bind on the attribute permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Explicit, with <code>.bind()</code> on the attribute</h3>\n<p>The older method was commonly to use <code>.bind()</code> to explicitly bind the value of this at the point of attaching the handler. That might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"es6-class-binding\" style=\"position:relative;\"><a href=\"#es6-class-binding\" aria-label=\"es6 class binding permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>ES6 Class binding</h3>\n<p>If you are using the new ES6 class syntax, you have all the other options, plus a few more. Let's say this is our base code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> updatedCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tcounter<span class=\"token operator\">:</span> updatedCount\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Counter + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One option is to use <code>.bind()</code>, in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ADDED:</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another option is to turn the <code>handleClick</code> method, into a <em>member</em>, that is the value of an arrow function, thus automatically binding <code>this</code> to the class:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Rest of class definition</span>\n<span class=\"token comment\">// Or: public handleClick = (evt) => {}</span>\n<span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> updatedCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tcounter<span class=\"token operator\">:</span> updatedCount\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<blockquote>\n<p>Technically, this is actually an ES6 <em>public field</em>, which is, as of 2019, in an experimental stage, so while it is well supported with transpiled JS/TS, it has limited native browser support.</p>\n</blockquote>\n<h3 id=\"inline-arrow-functions\" style=\"position:relative;\"><a href=\"#inline-arrow-functions\" aria-label=\"inline arrow functions permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Inline arrow functions</h3>\n<p>One of the benefits (or drawbacks) of arrow functions is that they lexically bind <code>this</code> - <strong>automatically</strong>. So, if you do:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>It doesn't matter if <code>CustomComponent</code> has a different <code>this</code> scope, because the arrow function binds the callback where you defined it!</p>\n<h3 id=\"use-createreactclass\" style=\"position:relative;\"><a href=\"#use-createreactclass\" aria-label=\"use createreactclass permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Use <code>createReactClass</code></h3>\n<p>If you use <code>createReactClass</code>, you generally don't have to worry about this issue, as <a href=\"https://reactjs.org/docs/react-without-es6.html#autobinding\" target=\"_blank\" rel=\"nofollow noopener\">createReactClass uses autobinding</a>, which basically does <code>.bind()</code> for you.</p>\n<h3 id=\"more-reading\" style=\"position:relative;\"><a href=\"#more-reading\" aria-label=\"more reading permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>More reading</h3>\n<ul>\n<li><a href=\"http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html\" target=\"_blank\" rel=\"nofollow noopener\">http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html</a></li>\n<li><a href=\"https://www.sitepoint.com/bind-javascripts-this-keyword-react/\" target=\"_blank\" rel=\"nofollow noopener\">https://www.sitepoint.com/bind-javascripts-this-keyword-react/</a></li>\n</ul>\n<hr>\n<h2 id=\"computed-properties\" style=\"position:relative;\"><a href=\"#computed-properties\" aria-label=\"computed properties permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Computed properties</h2>\n<p>Unlike Vue, which has a specific syntax for computed properties, React doesn't really care how you try to formulate values based on computed state properties.</p>\n<h3 id=\"es6-class---getter\" style=\"position:relative;\"><a href=\"#es6-class---getter\" aria-label=\"es6 class   getter permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>ES6 Class - Getter</h3>\n<p>With the new ES6 class based approach, a very clean solution is to use <em>getters</em>, with something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ... class stuff</span>\n\t<span class=\"token keyword\">get</span> <span class=\"token function\">isAdult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"within-the-render-function-itself\" style=\"position:relative;\"><a href=\"#within-the-render-function-itself\" aria-label=\"within the render function itself permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Within the render function itself</h3>\n<p>There is nothing preventing you from computing a value within the <code>render</code> function itself. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ... class stuff</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> isAdult <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t\t\t\tIs adult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>isAdult<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"as-a-function\" style=\"position:relative;\"><a href=\"#as-a-function\" aria-label=\"as a function permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>As a function</h3>\n<p>Another vanilla solution here is to simply use a function to return the computed value, rather than anything else. How you declare this is up to you:</p>\n<ul>\n<li>Explicitly, with <code>function myFunction(){}</code></li>\n<li>\n<p>As a ES6 class member</p>\n<ul>\n<li><code>public isAdult() {}</code></li>\n</ul>\n</li>\n<li>\n<p>With an arrow function to bind <code>this</code></p>\n<ul>\n<li><code>const isAdult = () => {};</code></li>\n</ul>\n</li>\n<li>Etc.</li>\n</ul>\n<p>To use within your <code>render</code> method, simply make sure you actually execute it by following it with the parenthesis and arguments if applicable.</p>\n<h3 id=\"state-management-system\" style=\"position:relative;\"><a href=\"#state-management-system\" aria-label=\"state management system permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>State management system</h3>\n<p>If you are using a dedicated state management system, there is a chance that what you are using might already have something in place to not only provide explicit computed properties, but also optimize them, to prevent redundant expensive re-calculations.</p>\n<p>For example, if you use MobX, make sure to check out <a href=\"https://mobx.js.org/refguide/computed-decorator.html\" target=\"_blank\" rel=\"nofollow noopener\">this page</a> on <em>computed values</em>.</p>\n<h3 id=\"further-reading\" style=\"position:relative;\"><a href=\"#further-reading\" aria-label=\"further reading permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Further reading:</h3>\n<ul>\n<li><a href=\"https://daveceddia.com/computed-properties-in-react/\" target=\"_blank\" rel=\"nofollow noopener\">https://daveceddia.com/computed-properties-in-react/</a></li>\n</ul>\n<hr>\n<h2 id=\"handlebars--mustache-type-logic-loops-conditional-etc\" style=\"position:relative;\"><a href=\"#handlebars--mustache-type-logic-loops-conditional-etc\" aria-label=\"handlebars  mustache type logic loops conditional etc permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Handlebars / Mustache type logic (loops, conditional, etc)</h2>\n<h3 id=\"conditional-rendering\" style=\"position:relative;\"><a href=\"#conditional-rendering\" aria-label=\"conditional rendering permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Conditional rendering</h3>\n<p>Tons of options - see <a href=\"https://scotch.io/tutorials/7-ways-to-implement-conditional-rendering-in-react-applications\" target=\"_blank\" rel=\"nofollow noopener\">\"7 ways to implement conditional rendering\"</a>.</p>\n<p>Some tricky ones to remember, but can be very helpful are:</p>\n<ul>\n<li>\n<p>AND (<code>&#x26;&#x26;</code>) operator to show or hide</p>\n<ul>\n<li>You can use <code>{shouldShowBool &#x26;&#x26; &#x3C;div>I'll only show up if shouldShowBool is true!&#x3C;/div>}</code></li>\n<li>This works because in JS, <code>A &#x26;&#x26; B</code> returns B if A is true, <strong><em>without</em></strong> coercing B to a boolean</li>\n</ul>\n</li>\n<li>\n<p>Ternary Operator (<code>_?_:_</code>) to swap between things</p>\n<ul>\n<li>You can use <code>{isLeaving ? &#x3C;p>Goodbye!&#x3C;/p> : &#x3C;p>Hello!&#x3C;/p>}</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"loop--array-render\" style=\"position:relative;\"><a href=\"#loop--array-render\" aria-label=\"loop  array render permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Loop / array render</h3>\n<p>The main way to render an array of something in React is to simply pass an array of JSX, within a <em>JavaScript Expression</em> block (e.g. <code>{myJsxArr}</code>). However, there are many ways to write this code:</p>\n<p>You could:</p>\n<ul>\n<li>Create an array of JSX template code assigned to a variable, and use it within <code>render()</code>, with something like: <code>items.push(&#x3C;div key={UNIQUE_KEY}>{CONTENT}&#x3C;/div>);</code></li>\n<li>\n<p>Iterate over the items directly in <code>render()</code>, and return the template there:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cookies'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Use an IIFE to construct and return the array, all inline within the JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">One through Ten:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> jsxArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tjsxArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Number </span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> jsxArr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>This is kind of an anti-pattern, so I would avoid and instead construct the array further up in the component before starting to return JSX / HTML.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react-hooks\" style=\"position:relative;\"><a href=\"#react-hooks\" aria-label=\"react hooks permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React Hooks</h2>\n<p>See <a href=\"./react-hooks.md\">my separate cheat sheet</a>.</p>\n<h2 id=\"react---typescript-and-tsx\" style=\"position:relative;\"><a href=\"#react---typescript-and-tsx\" aria-label=\"react   typescript and tsx permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - TypeScript and TSX</h2>\n<blockquote>\n<p>👉I also have <a href=\"../typescript.md\">a general cheat sheet on TypeScript</a> you might find helpful!</p>\n</blockquote>\n<h3 id=\"react---typescript-and-tsx---resources\" style=\"position:relative;\"><a href=\"#react---typescript-and-tsx---resources\" aria-label=\"react   typescript and tsx   resources permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - TypeScript and TSX - Resources</h3>\n<ul>\n<li><a href=\"../typescript.md\">My General TS Cheat Sheet</a></li>\n<li><a href=\"https://github.com/typescript-cheatsheets/react\" target=\"_blank\" rel=\"nofollow noopener\">typescript-cheatsheets/react</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\" target=\"_blank\" rel=\"nofollow noopener\">TypeScript Handbook - JSX</a></li>\n<li>@ddprrt: <a href=\"https://fettblog.eu/typescript-react/components/\" target=\"_blank\" rel=\"nofollow noopener\">TypeScript and React: Components</a></li>\n</ul>\n<h3 id=\"react---common-ts-issues\" style=\"position:relative;\"><a href=\"#react---common-ts-issues\" aria-label=\"react   common ts issues permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - Common TS Issues</h3>\n<ul>\n<li>\n<p>Error using component: <code>'__' cannot be used as a JSX component. Its return type '___' is not a valid JSX element.</code> + <code>ts(2786)</code></p>\n<ul>\n<li>Read the full error message to be sure, but this could be because you indeed have something unsafe or incorrectly typed</li>\n<li>\n<p>In some cases, this can be caused by type definition files <a href=\"https://stackoverflow.com/a/53859712/11447682\" target=\"_blank\" rel=\"nofollow noopener\">getting \"out of sync\"</a>. Especially if the specific error is that the return type might be <code>null</code>, but you know it shouldn't be</p>\n<ul>\n<li>Try completely deleting <code>node_modules</code>, all lock files, and then re-installing</li>\n</ul>\n</li>\n<li>Does adding <code>@types/react</code> as a devDependency fix it?</li>\n<li>Are you using <code>Preact</code>? You might want to take a look at <a href=\"https://github.com/scurker/preact-and-typescript\" target=\"_blank\" rel=\"nofollow noopener\">scurker/preact-and-typescript guide</a>, or see if <a href=\"https://joshuatz.com/posts/2020/fixing-jsx-types-between-preact-and-react-libraries/\" target=\"_blank\" rel=\"nofollow noopener\">this specific issue (around preact/compat) applies</a>.</li>\n</ul>\n</li>\n<li>\n<p><code>Cannot find name '___'</code></p>\n<ul>\n<li>Did you accidentally name your file with <code>.ts</code> instead of <code>.tsx</code>?</li>\n<li>Make sure you have configured the <code>jsx</code> and <code>jsxFactory</code> in <code>compilerOptions</code> in the TSConfig</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"react---common-ts-syntax-stuff\" style=\"position:relative;\"><a href=\"#react---common-ts-syntax-stuff\" aria-label=\"react   common ts syntax stuff permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>React - Common TS Syntax Stuff</h3>\n<ul>\n<li>Declaring prop types</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// All of the below are acceptable</span>\n\n<span class=\"token comment\">// We can define the shape of props separately</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BirthdayProps</span> <span class=\"token punctuation\">{</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> BirthdayProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// ...or, we can inline it</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// And we can also use destructuring for easier nested prop access:</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BirthdayGreeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> age<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Congrats </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on turning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>Reusing Prop Types / Extracting Prop Types</p>\n<ul>\n<li>\n<p>You can use <code>ComponentProps&#x3C;typeof MyComponent></code> (or <code>ComponentPropsWithoutRef</code>)</p>\n<ul>\n<li>For standard elements, you can use with string constant <code>ComponentProps&#x3C;'div'></code></li>\n</ul>\n</li>\n<li>Optimally, if using a library that separately exports Prop types, import &#x26; use that directly (e.g. <code>import {BoxProps} from '@chakra-ui/core'</code>)</li>\n<li>Another alternative is <code>JSX.IntrinsicElements[\"div\"]</code>, but this is not recommended.</li>\n<li>See <a href=\"https://stackoverflow.com/a/59137835/11447682\" target=\"_blank\" rel=\"nofollow noopener\">this S/O answer</a></li>\n<li>TS React Cheatsheet: <a href=\"https://github.com/typescript-cheatsheets/react/blob/main/docs/advanced/patterns_by_usecase.md#wrappingmirroring-a-html-element\" target=\"_blank\" rel=\"nofollow noopener\">\"Wrapping/Mirroring a HTML element</a></li>\n</ul>\n</li>\n<li>\n<p>Taking generic props / extending another component props</p>\n<ul>\n<li>It kind of depends on how specific you want to be, and what exact ecosystem you are using (<code>react</code>, <code>preact</code>, etc.)</li>\n<li>\n<p>It is usually best to combine your custom props with either:</p>\n<ul>\n<li>\n<p>A props interface exported from your framework (e.g. <code>BoxProps</code> from Chakra UI)</p>\n<ul>\n<li>Or...</li>\n</ul>\n</li>\n<li>\n<p><code>React.ComponentProps&#x3C;T></code> utility</p>\n<ul>\n<li>See reusing prop types section above for details</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Example: Custom component that allows parent to pass all standard <code>&#x3C;div></code> props 👇</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props <span class=\"token operator\">&amp;</span> ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token string\">'div'</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myComponent'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Accepting components through props / passing children</p>\n<ul>\n<li>The type signature of children is kind of tricky in React. In general, practically anything can be a child, so the type is pretty wide.</li>\n<li>\n<p>In standard React:</p>\n<ul>\n<li>the type for props that accept children looks like this: <code>P &#x26; { children?: ReactNode };</code> (<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L825\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>\n<p>And <code>ReactNode</code> can practically be anything:</p>\n<ul>\n<li><code>type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;</code> (<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/6a1c6a5567fa177396fa802b2367ec34e1028eea/types/react/index.d.ts#L239\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>This gets expanded even further...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>In <code>preact</code>:</p>\n<ul>\n<li>Type for props with children looks like: <code>P &#x26; { children: ComponentChildren }</code> (<a href=\"https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L15\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n<li>Just like in React, this gets expanded until it represents practically anything (<a href=\"https://github.com/preactjs/preact/blob/c7a7253da8fa8b447af0269217ef14a3ae02680e/src/index.d.ts#L46-L54\" target=\"_blank\" rel=\"nofollow noopener\">src</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Typing DOM events and change handlers</p>\n<ul>\n<li>There are multiple ways to do this</li>\n<li>\n<p>If you are trying to type the <code>evt</code> for an event handler, you can...</p>\n<ul>\n<li>\n<p>Use a type that accepts a generic slot for the event-generating element:</p>\n<ul>\n<li><code>evt: MouseEvent&#x3C;{ElementType}></code></li>\n<li><code>evt: TargetedEvent&#x3C;{ElementType}, Event></code></li>\n<li><code>evt: TargetedEvent&#x3C;{ElementType}, {EventSubType}></code></li>\n<li>Example: <code>TargetedEvent&#x3C;HTMLButtonElement, MouseEvent></code></li>\n</ul>\n</li>\n<li>\n<p>Merge a generic event type with an explicit type for <code>evt.target</code>:</p>\n<ul>\n<li><code>evt: MouseEvent&#x3C;HTMLButtonElement> &#x26; {target: HTMLButtonElement}</code></li>\n<li><code>evt: h.JSX.TargetedEvent&#x3C;HTMLSelectElement, Event> &#x26; {target: HTMLSelectElement}</code></li>\n<li><code>evt: InputEvent &#x26; {target: HTMLSelectElement</code></li>\n</ul>\n</li>\n<li>\n<p>Use the direct type, if you have it:</p>\n<ul>\n<li><code>onClick={(evt: MouseEvent) => {}}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If you are trying to type the element of <code>evt.target</code>, you can just type assert for that section:</p>\n<ul>\n<li><code>evt.target as HTMLInputElement</code></li>\n</ul>\n</li>\n<li>Some of this also depends on React vs Preact, framework libs, etc.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"material-ui-notes\" style=\"position:relative;\"><a href=\"#material-ui-notes\" aria-label=\"material ui notes permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Material-UI Notes</h2>\n<h3 id=\"material-ui-media-queries\" style=\"position:relative;\"><a href=\"#material-ui-media-queries\" aria-label=\"material ui media queries permalink\" class=\"anchor before\"><?xml version=\"1.0\" ?><svg id=\"Outlined\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><title/><g id=\"Fill\"><path fill=\"currentColor\" d=\"M29.35,6.88,25.11,2.63a3,3,0,0,0-4.23,0L14.64,8.81a3,3,0,0,0,0,4.25l1.44,1.45-1.54,1.54-1.42-1.42a3,3,0,0,0-4.24,0L2.65,20.8a3,3,0,0,0,0,4.26L6.88,29.3A3,3,0,0,0,9,30.17a3,3,0,0,0,2.11-.86l6.23-6.19A3,3,0,0,0,18.24,21a3,3,0,0,0-.88-2.13L16,17.46l1.54-1.54,1.39,1.38a3,3,0,0,0,4.23,0l6.23-6.18A2.94,2.94,0,0,0,30.23,9,3,3,0,0,0,29.35,6.88ZM15.94,20.29a1,1,0,0,1,.3.71,1,1,0,0,1-.3.7L9.71,27.89a1,1,0,0,1-1.41,0L4.06,23.64a1,1,0,0,1-.3-.71,1,1,0,0,1,.3-.71L10.29,16a1,1,0,0,1,1.41,0l1.42,1.42-2.83,2.83,1.42,1.42,2.83-2.83Zm12-10.58L21.7,15.89a1,1,0,0,1-1.41,0l-1.38-1.38,2.8-2.8-1.42-1.42-2.8,2.8-1.44-1.44a1,1,0,0,1,0-1.42l6.23-6.18A1,1,0,0,1,23,3.76a1,1,0,0,1,.71.29l4.24,4.24a1,1,0,0,1,0,1.42Z\"/></g></svg></a>Material-UI: Media Queries</h3>\n<p>In general, the <a href=\"https://material-ui.com/customization/breakpoints/\" target=\"_blank\" rel=\"nofollow noopener\">docs on breakpoints</a> are a good place to start. Here are a few options:</p>\n<ul>\n<li>\n<p>You can use them directly in <code>makeStyles</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> useStyles <span class=\"token operator\">=</span> <span class=\"token function\">makeStyles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theme</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tmyStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'@media (min-width: 1000px)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'400px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">// Or, with theme settings</span>\n\t\t<span class=\"token comment\">// https://material-ui.com/customization/breakpoints/#css-media-queries</span>\n\t\t<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\twidth<span class=\"token operator\">:</span> <span class=\"token string\">'200px'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>You can use the provided <a href=\"https://material-ui.com/customization/breakpoints/#usemediaquery-hook\" target=\"_blank\" rel=\"nofollow noopener\"><code>useMediaQuery</code> hooks</a></li>\n</ul>",
              "fields": {
                "title": "React / JSX - Cheatsheet",
                "slug": "/cheatsheets/react/",
                "modifiedStampMs": 1609497777000,
                "createdStampMs": 1566419461000
              },
              "parent": {
                "absolutePath": "/opt/build/repo/md/cheatsheets/react/index.md",
                "relativePath": "cheatsheets/react/index.md",
                "base": "index.md",
                "name": "index"
              }
            }
          ],
          "paths": []
        }
      }
    }
  },
  "staticQueryHashes": [
    "2563531922",
    "3649515864",
    "3795822034"
  ]
}
